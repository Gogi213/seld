// performance-test.js
// –ë–µ–Ω—á–º–∞—Ä–∫ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–æ –∏ –ø–æ—Å–ª–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏

const { performance } = require('perf_hooks');

// –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ Map –æ–±—ä–µ–∫—Ç–æ–≤ (–¥–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏)
function testMemoryLeakSimulation() {
  console.log('üß™ –¢–µ—Å—Ç 1: –°–∏–º—É–ª—è—Ü–∏—è —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏ (—Å—Ç–∞—Ä—ã–π –ø–æ–¥—Ö–æ–¥)');
  const startTime = performance.now();
  const startMemory = process.memoryUsage();
  
  // –°–∏–º—É–ª–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–π –ø–æ–¥—Ö–æ–¥ - —Å–æ–∑–¥–∞–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ Map –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞/—Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
  const maps = [];
  const symbols = Array.from({length: 100}, (_, i) => `SYMBOL${i}`);
  const timeframes = ['1m', '5m', '15m', '30m', '1h'];
  
  for (const symbol of symbols) {
    for (const tf of timeframes) {
      const map = new Map();
      // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–º–∏ –∫–∞–∫ –≤ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏
      for (let i = 0; i < 4000; i++) {
        map.set(`candle_${i}`, {
          openTime: Date.now() - i * 60000,
          open: 100 + Math.random() * 10,
          high: 105 + Math.random() * 10,
          low: 95 + Math.random() * 10,
          close: 100 + Math.random() * 10,
          volume: Math.random() * 1000000
        });
      }
      maps.push(map);
    }
  }
  
  const endTime = performance.now();
  const endMemory = process.memoryUsage();
  
  console.log(`   ‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${(endTime - startTime).toFixed(2)}ms`);
  console.log(`   üìä –ü–∞–º—è—Ç—å: ${Math.round((endMemory.heapUsed - startMemory.heapUsed) / 1024 / 1024)}MB`);
  console.log(`   üìà –°–æ–∑–¥–∞–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: ${maps.length} Map —Å ${maps[0].size} –∑–∞–ø–∏—Å—è–º–∏ –∫–∞–∂–¥–∞—è`);
  
  return {
    time: endTime - startTime,
    memory: endMemory.heapUsed - startMemory.heapUsed,
    objects: maps.length
  };
}

// –¢–µ—Å—Ç 2: –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ —Å LRU –∏ –ª–∏–º–∏—Ç–∞–º–∏
function testOptimizedApproach() {
  console.log('\nüöÄ –¢–µ—Å—Ç 2: –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥');
  const startTime = performance.now();
  const startMemory = process.memoryUsage();
  
  // –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–æ–¥—Ö–æ–¥ - –µ–¥–∏–Ω—ã–π –∫—ç—à —Å –ª–∏–º–∏—Ç–∞–º–∏
  const optimizedCache = new Map();
  const maxEntries = 200; // –õ–∏–º–∏—Ç –∫–∞–∫ –≤ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏
  const accessOrder = new Map();
  
  const symbols = Array.from({length: 100}, (_, i) => `SYMBOL${i}`);
  const timeframes = ['1m', '5m', '15m', '30m', '1h'];
  
  for (const symbol of symbols) {
    for (const tf of timeframes) {
      const key = `${symbol}_${tf}`;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã (–∫–∞–∫ –≤ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏)
      if (optimizedCache.size >= maxEntries) {
        // LRU cleanup - —É–¥–∞–ª—è–µ–º 25% —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
        const entries = Array.from(accessOrder.entries()).sort((a, b) => a[1] - b[1]);
        const toRemove = Math.ceil(entries.length * 0.25);
        for (let i = 0; i < toRemove; i++) {
          const keyToRemove = entries[i][0];
          optimizedCache.delete(keyToRemove);
          accessOrder.delete(keyToRemove);
        }
      }
      
      // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–≤–µ—á–µ–π
      const limitedData = [];
      for (let i = 0; i < 1000; i++) { // –£–º–µ–Ω—å—à–µ–Ω–æ —Å 4000 –¥–æ 1000
        limitedData.push({
          openTime: Date.now() - i * 60000,
          open: 100 + Math.random() * 10,
          high: 105 + Math.random() * 10,
          low: 95 + Math.random() * 10,
          close: 100 + Math.random() * 10,
          volume: Math.random() * 1000000
        });
      }
      
      optimizedCache.set(key, limitedData);
      accessOrder.set(key, Date.now());
    }
  }
  
  const endTime = performance.now();
  const endMemory = process.memoryUsage();
  
  console.log(`   ‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${(endTime - startTime).toFixed(2)}ms`);
  console.log(`   üìä –ü–∞–º—è—Ç—å: ${Math.round((endMemory.heapUsed - startMemory.heapUsed) / 1024 / 1024)}MB`);
  console.log(`   üìà –°–æ–∑–¥–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${optimizedCache.size} —Å –ª–∏–º–∏—Ç–æ–º ${maxEntries}`);
  
  return {
    time: endTime - startTime,
    memory: endMemory.heapUsed - startMemory.heapUsed,
    objects: optimizedCache.size
  };
}

// –¢–µ—Å—Ç 3: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã—á–∏—Å–ª–µ–Ω–∏–π —Å–∏–≥–Ω–∞–ª–æ–≤
function testSignalCalculationPerformance() {
  console.log('\n‚ö° –¢–µ—Å—Ç 3: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã—á–∏—Å–ª–µ–Ω–∏–π —Å–∏–≥–Ω–∞–ª–æ–≤');
  
  // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
  const testData = Array.from({length: 1000}, (_, i) => ({
    volume: Math.random() * 1000000,
    time: Date.now() - i * 60000
  }));
  
  // –¢–µ—Å—Ç —Å—Ç–∞—Ä–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ - –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
  const start1 = performance.now();
  const results1 = [];
  for (let i = 0; i < 100; i++) {
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –æ—Ç–¥–µ–ª—å–Ω–æ
    const sorted = [...testData.map(d => d.volume)].sort((a, b) => a - b);
    const percentile = sorted[Math.floor(sorted.length * 0.01)];
    results1.push(percentile);
  }
  const end1 = performance.now();
  
  // –¢–µ—Å—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ - –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  const start2 = performance.now();
  const cachedResults = new Map();
  const results2 = [];
  for (let i = 0; i < 100; i++) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    const cacheKey = 'percentile_calculation';
    if (cachedResults.has(cacheKey)) {
      results2.push(cachedResults.get(cacheKey));
    } else {
      const sorted = [...testData.map(d => d.volume)].sort((a, b) => a - b);
      const percentile = sorted[Math.floor(sorted.length * 0.01)];
      cachedResults.set(cacheKey, percentile);
      results2.push(percentile);
    }
  }
  const end2 = performance.now();
  
  console.log(`   üêå –°—Ç–∞—Ä—ã–π –ø–æ–¥—Ö–æ–¥: ${(end1 - start1).toFixed(2)}ms`);
  console.log(`   üöÄ –ù–æ–≤—ã–π –ø–æ–¥—Ö–æ–¥: ${(end2 - start2).toFixed(2)}ms`);
  console.log(`   üìà –£—Å–∫–æ—Ä–µ–Ω–∏–µ: ${((end1 - start1) / (end2 - start2)).toFixed(1)}x`);
  
  return {
    oldTime: end1 - start1,
    newTime: end2 - start2,
    speedup: (end1 - start1) / (end2 - start2)
  };
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±–µ–Ω—á–º–∞—Ä–∫–∞
async function runBenchmark() {
  console.log('üéØ –ë–ï–ù–ß–ú–ê–†–ö –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò\n');
  
  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∞–º–∏
  if (global.gc) {
    global.gc();
  }
  
  const initialMemory = process.memoryUsage();
  console.log(`üìä –ù–∞—á–∞–ª—å–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${Math.round(initialMemory.heapUsed / 1024 / 1024)}MB\n`);
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
  const test1Results = testMemoryLeakSimulation();
  
  // –û—á–∏—Å—Ç–∫–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
  if (global.gc) {
    global.gc();
  }
  
  const test2Results = testOptimizedApproach();
  const test3Results = testSignalCalculationPerformance();
  
  // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  console.log('\nüìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:');
  console.log('=' .repeat(50));
  
  const memoryImprovement = ((test1Results.memory - test2Results.memory) / test1Results.memory * 100);
  const timeImprovement = ((test1Results.time - test2Results.time) / test1Results.time * 100);
  
  console.log(`üíæ –°–Ω–∏–∂–µ–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏: ${memoryImprovement.toFixed(1)}%`);
  console.log(`‚è±Ô∏è  –£–ª—É—á—à–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${timeImprovement.toFixed(1)}%`);
  console.log(`üöÄ –£—Å–∫–æ—Ä–µ–Ω–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–π: ${test3Results.speedup.toFixed(1)}x`);
  console.log(`üìâ –°–æ–∫—Ä–∞—â–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –ø–∞–º—è—Ç–∏: ${((test1Results.objects - test2Results.objects) / test1Results.objects * 100).toFixed(1)}%`);
  
  const finalMemory = process.memoryUsage();
  console.log(`üìä –§–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${Math.round(finalMemory.heapUsed / 1024 / 1024)}MB`);
  
  return {
    memoryImprovement: memoryImprovement,
    timeImprovement: timeImprovement,
    computationSpeedup: test3Results.speedup,
    objectReduction: ((test1Results.objects - test2Results.objects) / test1Results.objects * 100)
  };
}

// –ó–∞–ø—É—Å–∫ –±–µ–Ω—á–º–∞—Ä–∫–∞
if (require.main === module) {
  runBenchmark().then(results => {
    console.log('\n‚úÖ –ë–µ–Ω—á–º–∞—Ä–∫ –∑–∞–≤–µ—Ä—à–µ–Ω!');
    
    // –ß–µ—Å—Ç–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
    console.log('\nüéØ –†–ï–ê–õ–¨–ù–ê–Ø –û–¶–ï–ù–ö–ê –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò:');
    if (results.memoryImprovement > 50) {
      console.log('‚úÖ –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏');
    } else if (results.memoryImprovement > 20) {
      console.log('‚úÖ –£–º–µ—Ä–µ–Ω–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏');
    } else {
      console.log('‚ö†Ô∏è  –ù–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏');
    }
    
    if (results.computationSpeedup > 2) {
      console.log('‚úÖ –°—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–π');
    } else if (results.computationSpeedup > 1.2) {
      console.log('‚úÖ –ó–∞–º–µ—Ç–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–π');
    } else {
      console.log('‚ö†Ô∏è  –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–π');
    }
    
  }).catch(console.error);
}

module.exports = { runBenchmark };
