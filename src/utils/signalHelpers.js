// signalHelpers.js - —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏
import { TF_LIST } from './constants';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
export function isValidSignal(signal) {
  return signal && 
         typeof signal === 'object' && 
         signal.symbol && 
         typeof signal.symbol === 'string' &&
         !signal.loading &&
         signal.dailyVolume !== undefined;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–≤–µ—á–µ–π
export function calculateSignalMarkers(candles, percentileWindow, percentileLevel) {
  if (!candles || candles.length < percentileWindow + 1) {
    return [];
  }
  
  const markers = [];
  const volumes = candles.map(c => c.volume);
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–∫—Ä—ã—Ç—ã–µ –±–∞—Ä—ã, –∏—Å–∫–ª—é—á–∞—è –ø–æ—Å–ª–µ–¥–Ω—é—é —Ñ–æ—Ä–º–∏—Ä—É—é—â—É—é—Å—è —Å–≤–µ—á—É
  for (let i = percentileWindow; i < candles.length - 1; i++) {
    const currentVolume = volumes[i];
    
    // –ë–µ—Ä–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—è (–∏—Å–∫–ª—é—á–∞—è —Ç–µ–∫—É—â—É—é –∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ —Å–≤–µ—á–∏)
    const historicalVolumes = volumes.slice(Math.max(0, i - percentileWindow), i);
    const sorted = [...historicalVolumes].sort((a, b) => a - b);
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–≤–µ—á–∏
    let rank = 0;
    for (let j = 0; j < sorted.length; j++) {
      if (sorted[j] < currentVolume) rank++;
      else break;
    }
    const percentileRank = (rank / Math.max(sorted.length - 1, 1)) * 100;
    const hasSignal = percentileRank <= percentileLevel;
    
    if (hasSignal) {
      markers.push({
        time: candles[i].time,
        position: 'aboveBar',
        color: '#38bdf8',
        shape: 'circle',
      });
    }
  }
  
  // –ë–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–≤–µ—á–µ–π
  return markers.slice(-50);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
export function sortSignals(signals, sortKey, sortDir, pinSignalsTop) {
  return [...signals].sort((a, b) => {
    if (pinSignalsTop) {
      // –°–Ω–∞—á–∞–ª–∞ –∑–∞–∫—Ä–µ–ø–ª—è–µ–º –º–æ–Ω–µ—Ç—ã —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏ (üê∏), —Å–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Ö –ø–æ natr30m —É–±—ã–≤.
      const hasSignalsA = TF_LIST.some(tf => a[`percentileSignal_${tf}`] || a[`percentileSignalExpired_${tf}`]);
      const hasSignalsB = TF_LIST.some(tf => b[`percentileSignal_${tf}`] || b[`percentileSignalExpired_${tf}`]);
      if (hasSignalsA && !hasSignalsB) return -1;
      if (!hasSignalsA && hasSignalsB) return 1;
      // –í–Ω—É—Ç—Ä–∏ –≥—Ä—É–ø–ø —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ natr30m —É–±—ã–≤–∞–Ω–∏—é
      return (b.natr30m || 0) - (a.natr30m || 0);
    }
    
    // –ï—Å–ª–∏ –Ω–µ –∑–∞–∫—Ä–µ–ø–ª—è—Ç—å ‚Äî —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∫—Ä–∏—Ç–µ—Ä–∏—é
    let vA = a[sortKey];
    let vB = b[sortKey];
    
    if (sortKey === 'symbol') {
      vA = vA || '';
      vB = vB || '';
      if (vA < vB) return sortDir === 'asc' ? -1 : 1;
      if (vA > vB) return sortDir === 'asc' ? 1 : -1;
      return 0;
    } else if (sortKey.startsWith('percentileRank_')) {
      const hasA = a[sortKey] !== undefined && a[sortKey] !== null;
      const hasB = b[sortKey] !== undefined && b[sortKey] !== null;
      if (!hasA && !hasB) return 0;
      if (!hasA) return 1;
      if (!hasB) return -1;
      vA = Number(vA) || 0;
      vB = Number(vB) || 0;
      return sortDir === 'asc' ? vA - vB : vB - vA;
    } else {
      vA = Number(vA) || 0;
      vB = Number(vB) || 0;
      return sortDir === 'asc' ? vA - vB : vB - vA;
    }
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ —É –º–æ–Ω–µ—Ç—ã
export function hasAnySignals(signal) {
  return TF_LIST.some(tf => signal[`percentileSignal_${tf}`] || signal[`percentileSignalExpired_${tf}`]);
}