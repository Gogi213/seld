// useSignalSound.js - —Ö—É–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–≤—É–∫–æ–≤—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
import { useState, useCallback, useRef, useEffect } from 'react';

const tfList = ["1m", "5m", "15m", "30m", "1h"];

export const useSignalSound = () => {
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º soundEnabled –∏–∑ localStorage
  const [soundEnabled, setSoundEnabled] = useState(() => {
    try {
      const saved = localStorage.getItem('soundEnabled');
      return saved !== null ? JSON.parse(saved) : true;
    } catch {
      return true;
    }
  });
  const [audioInitialized, setAudioInitialized] = useState(false);
  const audioRef = useRef(null);
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ soundEnabled –≤ localStorage –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
  useEffect(() => {
    try {
      localStorage.setItem('soundEnabled', JSON.stringify(soundEnabled));
    } catch (e) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–≤—É–∫–∞:', e);
    }
  }, [soundEnabled]);
  
  // –°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—Ä–µ–±–µ–∑–≥–∞
  const lastSoundTime = useRef(new Map()); // symbol+tf -> timestamp
  const recentSignals = useRef(new Map()); // symbol+tf -> { count, firstTime }
  const DEBOUNCE_TIME = 30000; // 30 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –∑–≤—É–∫–∞–º–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞+—Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
  const ANTI_BOUNCE_TIME = 120000; // 2 –º–∏–Ω—É—Ç—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥—Ä–µ–±–µ–∑–≥–∞
  const MAX_BOUNCES = 3; // –º–∞–∫—Å–∏–º—É–º 3 —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –∑–∞ –ø–µ—Ä–∏–æ–¥

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏
  const initializeAudio = useCallback(() => {
    if (!audioRef.current) {
      try {
        audioRef.current = new Audio('/sounds/lighter.mp3');
        audioRef.current.volume = 1.0;
        audioRef.current.preload = 'auto';
        
        // –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ–∏–≥—Ä–∞—Ç—å –∏ —Å—Ä–∞–∑—É –∂–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –ø–∞—É–∑—É –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        audioRef.current.play().then(() => {
          audioRef.current.pause();
          audioRef.current.currentTime = 0;
          setAudioInitialized(true);
          console.log('üîä –ê—É–¥–∏–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
        }).catch(e => {
          console.log('–ê—É–¥–∏–æ –±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∫–ª–∏–∫–µ:', e.message);
        });
      } catch (e) {
        console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Audio:', e);
      }
    }
  }, []);

  const playSignalSound = useCallback(() => {
    if (!soundEnabled) {
      console.log('üîá –ó–≤—É–∫ –æ—Ç–∫–ª—é—á–µ–Ω, –Ω–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º');
      return;
    }
    
    if (!audioRef.current) {
      initializeAudio();
      return;
    }
    
    try {
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∏ –∏–≥—Ä–∞–µ–º
      audioRef.current.currentTime = 0;
      audioRef.current.play().catch(e => {
        console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∑–≤—É–∫:', e.message);
        if (e.name === 'NotAllowedError' && !audioInitialized) {
          console.log('üí° –ö–ª–∏–∫–Ω–∏—Ç–µ –≤ –ª—é–±–æ–º –º–µ—Å—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∑–≤—É–∫–∞');
        }
      });
      console.log('üîä –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ —Å–∏–≥–Ω–∞–ª–∞');
    } catch (e) {
      console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏:', e);
    }
  }, [soundEnabled, audioInitialized, initializeAudio]);

  const checkForNewSignals = useCallback((oldSignal, newSignal, playSound = false) => {
    let hasNewActiveSignals = false;
    const now = Date.now();
    
    if (oldSignal) {
      tfList.forEach(tf => {
        const oldHasActiveSignal = oldSignal[`percentileSignal_${tf}`];
        const newHasActiveSignal = newSignal[`percentileSignal_${tf}`];
        const newHasExpiredSignal = newSignal[`percentileSignalExpired_${tf}`];
        
        if (!oldHasActiveSignal && newHasActiveSignal && !newHasExpiredSignal) {
          const signalKey = `${newSignal.symbol}_${tf}`;
          
          if (tf !== '1m') {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä–µ–±–µ–∑–≥
            const shouldPlaySound = checkAntiBouncingLogic(signalKey, now);
            
            if (shouldPlaySound) {
              hasNewActiveSignals = true;
              console.log(`üê∏ –ù–æ–≤—ã–π –ê–ö–¢–ò–í–ù–´–ô —Å–∏–≥–Ω–∞–ª: ${newSignal.symbol} –Ω–∞ ${tf} (${newSignal[`percentileRank_${tf}`]?.toFixed(1)}%)`);
            } else {
              console.log(`üîá –°–∏–≥–Ω–∞–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω (–¥—Ä–µ–±–µ–∑–≥): ${newSignal.symbol} –Ω–∞ ${tf} (${newSignal[`percentileRank_${tf}`]?.toFixed(1)}%)`);
            }
          } else {
            console.log(`üê∏ –ù–æ–≤—ã–π –ê–ö–¢–ò–í–ù–´–ô —Å–∏–≥–Ω–∞–ª: ${newSignal.symbol} –Ω–∞ ${tf} (${newSignal[`percentileRank_${tf}`]?.toFixed(1)}%) (–±–µ–∑ –∑–≤—É–∫–∞)`);
          }
        }
        
        const oldHasExpiredSignal = oldSignal[`percentileSignalExpired_${tf}`];
        if (!oldHasExpiredSignal && newHasExpiredSignal) {
          console.log(`‚ö†Ô∏è –ü—Ä–æ—Ç—É—Ö—à–∏–π —Å–∏–≥–Ω–∞–ª: ${newSignal.symbol} –Ω–∞ ${tf} (${newSignal[`percentileRank_${tf}`]?.toFixed(1)}%)`);
        }
      });
    } else {
      tfList.forEach(tf => {
        const hasActiveSignal = newSignal[`percentileSignal_${tf}`];
        const hasExpiredSignal = newSignal[`percentileSignalExpired_${tf}`];
        
        if (hasActiveSignal && !hasExpiredSignal) {
          const signalKey = `${newSignal.symbol}_${tf}`;
          
          if (tf !== '1m') {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä–µ–±–µ–∑–≥ –¥–ª—è –Ω–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
            const shouldPlaySound = checkAntiBouncingLogic(signalKey, now);
            
            if (shouldPlaySound) {
              hasNewActiveSignals = true;
              console.log(`üê∏ –ù–æ–≤–∞—è –º–æ–Ω–µ—Ç–∞ —Å –ê–ö–¢–ò–í–ù–´–ú —Å–∏–≥–Ω–∞–ª–æ–º: ${newSignal.symbol} –Ω–∞ ${tf} (${newSignal[`percentileRank_${tf}`]?.toFixed(1)}%)`);
            } else {
              console.log(`üîá –ù–æ–≤–∞—è –º–æ–Ω–µ—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ (–¥—Ä–µ–±–µ–∑–≥): ${newSignal.symbol} –Ω–∞ ${tf} (${newSignal[`percentileRank_${tf}`]?.toFixed(1)}%)`);
            }
          } else {
            console.log(`üê∏ –ù–æ–≤–∞—è –º–æ–Ω–µ—Ç–∞ —Å –ê–ö–¢–ò–í–ù–´–ú —Å–∏–≥–Ω–∞–ª–æ–º: ${newSignal.symbol} –Ω–∞ ${tf} (${newSignal[`percentileRank_${tf}`]?.toFixed(1)}%) (–±–µ–∑ –∑–≤—É–∫–∞)`);
          }
        } else if (hasExpiredSignal) {
          console.log(`‚ö†Ô∏è –ù–æ–≤–∞—è –º–æ–Ω–µ—Ç–∞ —Å –ø—Ä–æ—Ç—É—Ö—à–∏–º —Å–∏–≥–Ω–∞–ª–æ–º: ${newSignal.symbol} –Ω–∞ ${tf} (${newSignal[`percentileRank_${tf}`]?.toFixed(1)}%)`);
        }
      });
    }
    
    if (hasNewActiveSignals && playSound) {
      playSignalSound();
    }
    
    return hasNewActiveSignals;
  }, [playSignalSound]);

  // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–Ω—Ç–∏-–¥—Ä–µ–±–µ–∑–≥–∞
  const checkAntiBouncingLogic = useCallback((signalKey, now) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –∫–æ–≥–¥–∞ –∏–≥—Ä–∞–ª –∑–≤—É–∫ –¥–ª—è —ç—Ç–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
    const lastSound = lastSoundTime.current.get(signalKey);
    if (lastSound && (now - lastSound) < DEBOUNCE_TIME) {
      return false; // –°–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–≤—É–∫–∞
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä–µ–±–µ–∑–≥ - —á–∞—Å—Ç—ã–µ –ø–æ—è–≤–ª–µ–Ω–∏—è/–∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞
    const recentData = recentSignals.current.get(signalKey);
    if (recentData) {
      // –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–µ—Ä–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
      if ((now - recentData.firstTime) > ANTI_BOUNCE_TIME) {
        recentSignals.current.set(signalKey, { count: 1, firstTime: now });
      } else {
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
        recentData.count++;
        if (recentData.count > MAX_BOUNCES) {
          console.log(`üö´ –î—Ä–µ–±–µ–∑–≥ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –¥–ª—è ${signalKey}: ${recentData.count} —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π –∑–∞ ${Math.round((now - recentData.firstTime) / 1000)}—Å`);
          return false; // –ë–ª–æ–∫–∏—Ä—É–µ–º –∏–∑-–∑–∞ –¥—Ä–µ–±–µ–∑–≥–∞
        }
      }
    } else {
      recentSignals.current.set(signalKey, { count: 1, firstTime: now });
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–≤—É–∫–∞
    lastSoundTime.current.set(signalKey, now);
    return true;
  }, []);

  return {
    soundEnabled,
    setSoundEnabled,
    playSignalSound,
    checkForNewSignals,
    audioInitialized,
    initializeAudio
  };
};