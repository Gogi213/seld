// candleAggregator.cjs
// –ú–æ–¥—É–ª—å –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ —Å–≤–µ—á–µ–π –∏–∑ 1-–º–∏–Ω—É—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –¥—Ä—É–≥–∏–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã

class CandleAggregator {
  constructor() {
    // –ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è 1m —Å–≤–µ—á–µ–π –ø–æ —Å–∏–º–≤–æ–ª–∞–º
    this.minuteCandles = new Map(); // symbol -> array of 1m candles
    // –ö—ç—à –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å LRU –º–µ—Ö–∞–Ω–∏–∑–º–æ–º
    this.aggregatedCache = new Map(); // symbol_timeframe -> array of candles
    this.cacheAccessOrder = new Map(); // symbol_timeframe -> timestamp
    
    // –õ–∏–º–∏—Ç—ã –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏
    this.maxMinuteCandles = 2000; // –£–º–µ–Ω—å—à–µ–Ω–æ —Å 4000 –¥–æ 2000 (1.4 –¥–Ω—è)
    this.maxSymbols = 50; // –ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤ –≤ –∫—ç—à–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    this.maxAggregatedCache = 200; // –ú–∞–∫—Å–∏–º—É–º 200 –∑–∞–ø–∏—Å–µ–π –≤ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –∫—ç—à–µ
    
    // –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    this.cleanupCounter = 0;
    this.lastCleanup = Date.now();
  }

  // –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é 1-–º–∏–Ω—É—Ç–Ω—É—é —Å–≤–µ—á—É
  addMinuteCandle(symbol, candle) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º
    this.enforceSymbolLimits();
    
    if (!this.minuteCandles.has(symbol)) {
      this.minuteCandles.set(symbol, []);
    }
    const candles = this.minuteCandles.get(symbol);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥—É–±–ª–∏—Ä—É–µ—Ç—Å—è –ª–∏ —Å–≤–µ—á–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    const existingIndex = candles.findIndex(c => c.openTime === candle.openTime);
    if (existingIndex !== -1) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–≤–µ—á—É (–¥–ª—è —Ñ–æ—Ä–º–∏—Ä—É—é—â–∏—Ö—Å—è —Å–≤–µ—á–µ–π)
      candles[existingIndex] = candle;
    } else {
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å–≤–µ—á—É
      candles.push(candle);
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
      candles.sort((a, b) => a.openTime - b.openTime);
      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞
      if (candles.length > this.maxMinuteCandles) {
        candles.splice(0, candles.length - this.maxMinuteCandles);
      }
    }
    // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
    this.invalidateAggregatedCache(symbol);
  }

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–±–ª—é–¥–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ —Å–∏–º–≤–æ–ª–æ–≤
  enforceSymbolLimits() {
    if (this.minuteCandles.size >= this.maxSymbols) {
      // –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π —Å–∏–º–≤–æ–ª (LRU) –∏ —É–¥–∞–ª—è–µ–º –µ–≥–æ
      let oldestTime = Date.now();
      let oldestSymbol = null;
      
      for (const [symbol, candles] of this.minuteCandles.entries()) {
        if (candles.length > 0) {
          const lastCandleTime = candles[candles.length - 1].openTime;
          if (lastCandleTime < oldestTime) {
            oldestTime = lastCandleTime;
            oldestSymbol = symbol;
          }
        }
      }
      
      if (oldestSymbol) {
        this.minuteCandles.delete(oldestSymbol);
        this.invalidateAggregatedCache(oldestSymbol);
        console.log(`üßπ Removed old symbol from cache: ${oldestSymbol}`);
      }
    }
  }

  // –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫—ç—à–∞ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  invalidateAggregatedCache(symbol) {
    const keysToDelete = [];
    for (const key of this.aggregatedCache.keys()) {
      if (key.startsWith(symbol + '_')) {
        keysToDelete.push(key);
      }
    }
    keysToDelete.forEach(key => this.aggregatedCache.delete(key));
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–≤–µ—á–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
  getAggregatedCandles(symbol, timeframe, limit = 4000) {
    const cacheKey = `${symbol}_${timeframe}`;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è LRU
    this.cacheAccessOrder.set(cacheKey, Date.now());
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    if (this.aggregatedCache.has(cacheKey)) {
      const cached = this.aggregatedCache.get(cacheKey);
      return cached.slice(-limit);
    }
    
    const minuteCandles = this.minuteCandles.get(symbol);
    if (!minuteCandles || minuteCandles.length === 0) {
      return [];
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º–∏–Ω—É—Ç–∞—Ö
    const intervalMinutes = this.getIntervalMinutes(timeframe);
    if (intervalMinutes === 1) {
      // –î–ª—è 1m –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      const result = minuteCandles.slice(-limit);
      this.setAggregatedCache(cacheKey, result);
      return result;
    }
    
    // –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    const aggregated = this.aggregateCandles(minuteCandles, intervalMinutes);
    this.setAggregatedCache(cacheKey, aggregated);
    
    return aggregated.slice(-limit);
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫—ç—à —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ª–∏–º–∏—Ç–æ–≤
  setAggregatedCache(cacheKey, data) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –∫—ç—à–∞
    if (this.aggregatedCache.size >= this.maxAggregatedCache) {
      this.cleanupAggregatedCache();
    }
    
    this.aggregatedCache.set(cacheKey, data);
    this.cacheAccessOrder.set(cacheKey, Date.now());
  }

  // –û—á–∏—Å—Ç–∫–∞ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫—ç—à–∞ –ø–æ LRU –ø—Ä–∏–Ω—Ü–∏–ø—É
  cleanupAggregatedCache() {
    const entries = Array.from(this.cacheAccessOrder.entries());
    entries.sort((a, b) => a[1] - b[1]); // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç—É–ø–∞
    
    // –£–¥–∞–ª—è–µ–º 25% —Å–∞–º—ã—Ö —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
    const toRemove = Math.ceil(entries.length * 0.25);
    for (let i = 0; i < toRemove; i++) {
      const keyToRemove = entries[i][0];
      this.aggregatedCache.delete(keyToRemove);
      this.cacheAccessOrder.delete(keyToRemove);
    }
    
    this.cleanupCounter++;
    console.log(`üßπ Cleaned up ${toRemove} entries from aggregated cache (cleanup #${this.cleanupCounter})`);
  }

  // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ –≤ –º–∏–Ω—É—Ç—ã
  getIntervalMinutes(timeframe) {
    const intervals = {
      '1m': 1,
      '3m': 3,
      '5m': 5,
      '15m': 15,
      '30m': 30,
      '1h': 60,
      '2h': 120,
      '4h': 240,
      '6h': 360,
      '8h': 480,
      '12h': 720,
      '1d': 1440
    };
    return intervals[timeframe] || 1;
  }

  // –ê–≥—Ä–µ–≥–∞—Ü–∏—è —Å–≤–µ—á–µ–π
  aggregateCandles(minuteCandles, intervalMinutes) {
    if (minuteCandles.length === 0) return [];
    
    const aggregated = [];
    let currentGroup = [];
    let groupStartTime = null;
    
    for (const candle of minuteCandles) {
      const candleTime = new Date(candle.openTime);
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –¥–ª—è —ç—Ç–æ–π —Å–≤–µ—á–∏
      const intervalStart = this.getIntervalStart(candleTime, intervalMinutes);
      
      if (groupStartTime === null) {
        groupStartTime = intervalStart.getTime();
      }
      
      // –ï—Å–ª–∏ —Å–≤–µ—á–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–∫—É—â–µ–º—É –∏–Ω—Ç–µ—Ä–≤–∞–ª—É
      if (intervalStart.getTime() === groupStartTime) {
        currentGroup.push(candle);
      } else {
        // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â—É—é –≥—Ä—É–ø–ø—É –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é
        if (currentGroup.length > 0) {
          aggregated.push(this.createAggregatedCandle(currentGroup, groupStartTime));
        }
        
        currentGroup = [candle];
        groupStartTime = intervalStart.getTime();
      }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≥—Ä—É–ø–ø—É
    if (currentGroup.length > 0) {
      aggregated.push(this.createAggregatedCandle(currentGroup, groupStartTime));
    }
    
    return aggregated;
  }

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
  getIntervalStart(date, intervalMinutes) {
    const result = new Date(date);
    const minutes = result.getMinutes();
    const alignedMinutes = Math.floor(minutes / intervalMinutes) * intervalMinutes;
    
    result.setMinutes(alignedMinutes);
    result.setSeconds(0);
    result.setMilliseconds(0);
    
    return result;
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–≤–µ—á–∏ –∏–∑ –≥—Ä—É–ø–ø—ã 1m —Å–≤–µ—á–µ–π
  createAggregatedCandle(candles, openTime) {
    if (candles.length === 0) return null;
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
    candles.sort((a, b) => a.openTime - b.openTime);
    
    const first = candles[0];
    const last = candles[candles.length - 1];
    
    // OHLC –∞–≥—Ä–µ–≥–∞—Ü–∏—è
    const open = first.open;
    const close = last.close;
    const high = Math.max(...candles.map(c => c.high));
    const low = Math.min(...candles.map(c => c.low));
    
    // –°—É–º–º–∏—Ä—É–µ–º –æ–±—ä–µ–º—ã
    const volume = candles.reduce((sum, c) => sum + c.volume, 0);
    const quoteVolume = candles.reduce((sum, c) => sum + (c.quoteVolume || 0), 0);
    const trades = candles.reduce((sum, c) => sum + (c.trades || 0), 0);
    
    return {
      openTime,
      open,
      high,
      low,
      close,
      volume,
      quoteVolume,
      trades,
      closeTime: last.closeTime || (openTime + (candles.length * 60 * 1000) - 1)
    };
  }

  // –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
  getAvailableSymbols() {
    return Array.from(this.minuteCandles.keys());
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞
  getCacheStats() {
    const symbolsCount = this.minuteCandles.size;
    let totalMinuteCandles = 0;
    let totalAggregatedCandles = 0;
    
    for (const candles of this.minuteCandles.values()) {
      totalMinuteCandles += candles.length;
    }
    
    for (const candles of this.aggregatedCache.values()) {
      totalAggregatedCandles += candles.length;
    }
    
    return {
      symbolsCount,
      totalMinuteCandles,
      totalAggregatedCandles,
      aggregatedCacheSize: this.aggregatedCache.size
    };
  }

  // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
  cleanup(maxAgeMs = 12 * 60 * 60 * 1000) { // 12 —á–∞—Å–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (—É–º–µ–Ω—å—à–µ–Ω–æ —Å 24)
    const cutoffTime = Date.now() - maxAgeMs;
    let cleanedSymbols = 0;
    let cleanedCandles = 0;
    
    for (const [symbol, candles] of this.minuteCandles.entries()) {
      const filteredCandles = candles.filter(c => c.openTime >= cutoffTime);
      if (filteredCandles.length !== candles.length) {
        cleanedCandles += candles.length - filteredCandles.length;
        if (filteredCandles.length === 0) {
          // –£–¥–∞–ª—è–µ–º —Å–∏–º–≤–æ–ª –ø–æ–ª–Ω–æ—Å—Ç—å—é, –µ—Å–ª–∏ –≤—Å–µ —Å–≤–µ—á–∏ —É—Å—Ç–∞—Ä–µ–ª–∏
          this.minuteCandles.delete(symbol);
          cleanedSymbols++;
        } else {
          this.minuteCandles.set(symbol, filteredCandles);
        }
        this.invalidateAggregatedCache(symbol);
      }
    }
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫—ç—à–∞
    this.cleanupAggregatedCache();
    
    if (cleanedSymbols > 0 || cleanedCandles > 0) {
      console.log(`üßπ Cleanup completed: removed ${cleanedSymbols} symbols, ${cleanedCandles} candles`);
    }
    
    this.lastCleanup = Date.now();
  }

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏
  forceCleanup() {
    const before = this.getCacheStats();
    
    // –û—á–∏—â–∞–µ–º –≤–µ—Å—å –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫—ç—à
    this.aggregatedCache.clear();
    this.cacheAccessOrder.clear();
    
    // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 —Å–≤–µ—á–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
    for (const [symbol, candles] of this.minuteCandles.entries()) {
      if (candles.length > 1000) {
        this.minuteCandles.set(symbol, candles.slice(-1000));
      }
    }
    
    const after = this.getCacheStats();
    console.log(`üßπ Force cleanup: ${before.totalMinuteCandles} -> ${after.totalMinuteCandles} candles, ${before.totalAggregatedCandles} -> ${after.totalAggregatedCandles} aggregated`);
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π garbage collection, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
    if (global.gc) {
      global.gc();
      console.log('üßπ Forced garbage collection');
    }
  }
}

module.exports = CandleAggregator;