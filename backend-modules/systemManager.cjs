// backend-modules/systemManager.cjs
// –ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã

const CandleAggregator = require('../candleAggregator.cjs');
const BinanceWebSocketManager = require('../binanceWebSocket.cjs');
const EnhancedSignalEngine = require('../enhancedSignalEngine.cjs');

const BinanceApiService = require('./binanceApi.cjs');
const SymbolManager = require('./symbolManager.cjs');
const DataManager = require('./dataManager.cjs');
const WebSocketServer = require('./webSocketServer.cjs');
const MemoryMonitor = require('./memoryMonitor.cjs');
const TelegramBot = require('./telegramBot.cjs');
const { WEBSOCKET, FILTERS, INTERVALS, SIGNALS, EMOJIS } = require('./constants.cjs');

class SystemManager {
  constructor(options = {}) {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã
    this.config = {
      // WebSocket —Å–µ—Ä–≤–µ—Ä
      wsPort: options.wsPort || 3001,
      wsHost: options.wsHost || '0.0.0.0',
      
      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–∏–º–≤–æ–ª–æ–≤
      minDailyVolume: options.minDailyVolume || 150000000, // 150 –º–ª–Ω —Å—É—Ç–æ—á–Ω–æ–≥–æ –æ–±—ä—ë–º–∞
      minNotional: options.minNotional || 0.4, // 0.4 NATR
      
      // –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
      symbolsUpdateInterval: options.symbolsUpdateInterval || 5 * 60 * 1000, // –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
      dataCalculationInterval: options.dataCalculationInterval || 1 * 1000, // –∫–∞–∂–¥—É—é 1 —Å–µ–∫—É–Ω–¥—É
      broadcastInterval: options.broadcastInterval || 1 * 1000, // –∫–∞–∂–¥—É—é 1 —Å–µ–∫—É–Ω–¥—É
      
      // –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
      defaultPercentileWindow: options.defaultPercentileWindow || 50,
      defaultPercentileLevel: options.defaultPercentileLevel || 1
    };
    
    // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    this.candleAggregator = null;
    this.binanceWS = null;
    this.signalEngine = null;
    this.binanceApi = null;
    this.symbolManager = null;
    this.dataManager = null;
    this.webSocketServer = null;
    this.memoryMonitor = null;
    this.telegramBot = null;
    
    // –¢–∞–π–º–µ—Ä—ã
    this.symbolsUpdateTimer = null;
    this.dataCalculationTimer = null;
    this.cleanupTimer = null;
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
    this.isInitialized = false;
    this.isRunning = false;
    this.lastSignalStates = new Map(); // symbol -> {1m: bool, 5m: bool} –¥–ª—è —Ç—Ä–µ–∫–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
    this.signalCheckCooldowns = new Map(); // symbol -> timestamp –¥–ª—è –¥–µ–±–∞—É–Ω—Å–∏–Ω–≥–∞
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã
   */
  async initialize() {
    if (this.isInitialized) {
      console.log('‚ö†Ô∏è System already initialized');
      return;
    }
    
    console.log('üîÑ Initializing system components...');
    
    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
      this.candleAggregator = new CandleAggregator();
      this.binanceWS = new BinanceWebSocketManager(this.candleAggregator);
      this.signalEngine = new EnhancedSignalEngine(this.candleAggregator);
      this.binanceApi = new BinanceApiService();
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
      this.symbolManager = new SymbolManager(this.candleAggregator, this.binanceWS, {
        minDailyVolume: this.config.minDailyVolume,
        minNotional: this.config.minNotional,
        updateInterval: this.config.symbolsUpdateInterval
      });
      
      this.dataManager = new DataManager(this.symbolManager, this.candleAggregator, this.signalEngine, {
        cacheInterval: this.config.dataCalculationInterval,
        defaultPercentileWindow: this.config.defaultPercentileWindow,
        defaultPercentileLevel: this.config.defaultPercentileLevel
      });
      
      this.webSocketServer = new WebSocketServer(this.dataManager, {
        port: this.config.wsPort,
        host: this.config.wsHost,
        broadcastInterval: this.config.broadcastInterval
      });
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∞ –ø–∞–º—è—Ç–∏
      this.memoryMonitor = new MemoryMonitor({
        warningThreshold: 512 * 1024 * 1024, // 512MB
        criticalThreshold: 768 * 1024 * 1024, // 768MB
        checkInterval: 30000, // 30 —Å–µ–∫—É–Ω–¥
        cleanupCallback: (level) => this.handleMemoryCleanup(level)
      });
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞
      this.telegramBot = new TelegramBot({
        botToken: process.env.TELEGRAM_BOT_TOKEN || '7669528584:AAEz-BE8fs7v5Eq1ema3AD0n2wvejNm9ibw',
        chatId: process.env.TELEGRAM_CHAT_ID || '-1002565633603', // –í–∞—à Chat ID
        threadId: process.env.TELEGRAM_THREAD_ID || '4294969041', // Thread ID –≤–∞—à–µ–π —Ç–µ–º—ã
        enabledTimeframes: ['1m', '5m']
        // –£–±—Ä–∞–ª–∏ signalCooldown - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª—ã –±–µ–∑ –∑–∞–¥–µ—Ä–∂–µ–∫
      });
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
      this._setupEventHandlers();
      
      this.isInitialized = true;
      console.log('‚úÖ System components initialized successfully');
      
    } catch (error) {
      console.error('‚ùå Failed to initialize system:', error);
      throw error;
    }
  }

  /**
   * –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É
   */
  async start() {
    if (!this.isInitialized) {
      await this.initialize();
    }
    
    if (this.isRunning) {
      console.log('‚ö†Ô∏è System already running');
      return;
    }
    
    console.log('üöÄ Starting system...');
    
    try {
      // –ó–∞–ø—É—Å–∫ WebSocket —Å–µ—Ä–≤–µ—Ä–∞
      this.webSocketServer.start();
      
      // –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∞ –ø–∞–º—è—Ç–∏
      this.memoryMonitor.start();
      
      // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
      await this.symbolManager.updateActiveSymbols();
      
      // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –¥–∞–Ω–Ω—ã—Ö
      await this.dataManager.calculateAndCacheData();
      
      // –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á
      this._startPeriodicTasks();
      
      this.isRunning = true;
      
      console.log('‚úÖ System started successfully');
      this._logSystemStats();
      
    } catch (error) {
      console.error('‚ùå Failed to start system:', error);
      throw error;
    }
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É
   */
  async stop() {
    if (!this.isRunning) {
      console.log('‚ö†Ô∏è System not running');
      return;
    }
    
    console.log('üõë Stopping system...');
    
    try {
      // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á
      this._stopPeriodicTasks();
      
      // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∞ –ø–∞–º—è—Ç–∏
      if (this.memoryMonitor) {
        this.memoryMonitor.stop();
      }
      
      // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ WebSocket —Å–µ—Ä–≤–µ—Ä–∞
      if (this.webSocketServer) {
        this.webSocketServer.stop();
      }
      
      // –ó–∞–∫—Ä—ã—Ç–∏–µ Binance WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
      if (this.binanceWS) {
        this.binanceWS.close();
      }
      
      this.isRunning = false;
      console.log('‚úÖ System stopped successfully');
      
    } catch (error) {
      console.error('‚ùå Error stopping system:', error);
      throw error;
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
   * @private
   */
  _setupEventHandlers() {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç WebSocket Binance
    this.binanceWS.on('kline', (symbol, kline) => {
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–µ—á—É –≤ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä
      this.candleAggregator.addMinuteCandle(symbol, {
        openTime: kline.t,
        open: parseFloat(kline.o),
        high: parseFloat(kline.h),
        low: parseFloat(kline.l),
        close: parseFloat(kline.c),
        volume: parseFloat(kline.v),
        quoteVolume: parseFloat(kline.q),
        trades: kline.n
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ –∫–∞–∂–¥–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ (–Ω–µ —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ —Å–≤–µ—á–∞ –∑–∞–∫—Ä—ã—Ç–∞)
      if (this.webSocketServer && this.webSocketServer.getClientsCount() > 0) {
        this.webSocketServer.broadcastSymbolUpdate(symbol);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º Telegram —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ –∫–∞–∂–¥–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏
      // –î–µ–±–∞—É–Ω—Å–∏–Ω–≥ –∑–∞—â–∏—Ç–∏—Ç –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
      this._checkTelegramSignalsWithDebounce(symbol);
    });
    
    console.log('üì° Event handlers configured');
  }

  /**
   * –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á
   * @private
   */
  _startPeriodicTasks() {
    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤
    this.symbolsUpdateTimer = setInterval(async () => {
      try {
        await this.symbolManager.updateActiveSymbols();
        await this.dataManager.calculateAndCacheData();
      } catch (error) {
        console.error('Error in symbols update task:', error);
      }
    }, this.config.symbolsUpdateInterval);
    
    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Å—á–µ—Ç –¥–∞–Ω–Ω—ã—Ö
    this.dataCalculationTimer = setInterval(async () => {
      try {
        if (this.symbolManager.getActiveSymbolsCount() > 0) {
          await this.dataManager.calculateAndCacheData();
        }
      } catch (error) {
        console.error('Error in data calculation task:', error);
      }
    }, this.config.dataCalculationInterval);
    
    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–µ–π (–∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç)
    this.cleanupTimer = setInterval(() => {
      try {
        this.performMaintenanceCleanup();
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
        if (global.gc) {
          console.log('üóëÔ∏è Running manual garbage collection...');
          global.gc();
          const memUsage = process.memoryUsage();
          console.log(`üíæ Memory after GC: ${Math.round(memUsage.heapUsed / 1024 / 1024)}MB / ${Math.round(memUsage.heapTotal / 1024 / 1024)}MB`);
        }
      } catch (error) {
        console.error('Error in cleanup task:', error);
      }
    }, 10 * 60 * 1000);
    
    console.log('‚è∞ Periodic tasks started');
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á
   * @private
   */
  _stopPeriodicTasks() {
    if (this.symbolsUpdateTimer) {
      clearInterval(this.symbolsUpdateTimer);
      this.symbolsUpdateTimer = null;
    }
    
    if (this.dataCalculationTimer) {
      clearInterval(this.dataCalculationTimer);
      this.dataCalculationTimer = null;
    }
    
    if (this.cleanupTimer) {
      clearInterval(this.cleanupTimer);
      this.cleanupTimer = null;
    }
    
    console.log('‚è∞ Periodic tasks stopped');
  }

  /**
   * –ü–ª–∞–Ω–æ–≤–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–µ–π
   * @private
   */
  performMaintenanceCleanup() {
    console.log('üßπ Performing maintenance cleanup...');
    
    // –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ —Å–≤–µ—á–µ–π
    if (this.candleAggregator) {
      this.candleAggregator.cleanup();
    }
    
    // –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
    if (this.signalEngine && typeof this.signalEngine.cleanupExpiredCache === 'function') {
      this.signalEngine.cleanupExpiredCache();
    }
    
    // –£–º–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å–∏–≥–Ω–∞–ª–æ–≤ (—Å—Ç–∞—Ä—à–µ 2 —á–∞—Å–æ–≤)
    this._cleanupExpiredSignalStates();
    
    console.log('‚úÖ Maintenance cleanup completed');
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å–∏–≥–Ω–∞–ª–æ–≤
   * @private
   */
  _cleanupExpiredSignalStates() {
    const now = Date.now();
    const maxAge = 2 * 60 * 60 * 1000; // 2 —á–∞—Å–∞
    let cleanedCooldowns = 0;
    
    // –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∫—É–ª–¥–∞—É–Ω—ã (—Å—Ç–∞—Ä—à–µ 2 —á–∞—Å–æ–≤)
    for (const [symbol, timestamp] of this.signalCheckCooldowns.entries()) {
      if (now - timestamp > maxAge) {
        this.signalCheckCooldowns.delete(symbol);
        cleanedCooldowns++;
      }
    }
    
    // –°–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –ù–ï –æ—á–∏—â–∞–µ–º - –æ–Ω–∏ –Ω—É–∂–Ω—ã –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–µ–π
    // –û–Ω–∏ –æ—á–∏—Å—Ç—è—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –Ω–µ—Ö–≤–∞—Ç–∫–µ –ø–∞–º—è—Ç–∏
    
    if (cleanedCooldowns > 0) {
      console.log(`üßπ Cleaned ${cleanedCooldowns} expired signal cooldowns`);
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è –ø–∞–º—è—Ç–∏
   * @private
   */
  handleMemoryCleanup(level) {
    console.log(`üßπ Handling memory cleanup for level: ${level}`);
    
    if (level === 'critical') {
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–º —É—Ä–æ–≤–Ω–µ
      if (this.candleAggregator && typeof this.candleAggregator.forceCleanup === 'function') {
        this.candleAggregator.forceCleanup();
      }
      
      // –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
      if (this.signalEngine) {
        this.signalEngine.signalCache.clear();
        this.signalEngine.lastUpdateTime.clear();
      }
      
      // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      if (this.dataManager) {
        this.dataManager.preCalculatedData = null;
      }
      
      // –í–ê–ñ–ù–û: –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
      this.lastSignalStates.clear();
      this.signalCheckCooldowns.clear();
      console.log('üßπ Cleared signal states and cooldowns to prevent duplicates');
      
    } else if (level === 'warning') {
      // –ú—è–≥–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é—â–µ–º —É—Ä–æ–≤–Ω–µ
      this.performMaintenanceCleanup();
    }
  }

  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã
   * @private
   */
  _logSystemStats() {
    const stats = this.getSystemStats();
    
    console.log('üìä System Statistics:');
    console.log(`   Active symbols: ${stats.symbolManager.activeSymbolsCount}`);
    console.log(`   Connected clients: ${stats.webSocketServer.clientsCount}`);
    console.log(`   WebSocket server: ws://${stats.webSocketServer.host}:${stats.webSocketServer.port}`);
    console.log(`   Pre-calculated data: ${stats.dataManager.hasCachedData ? 'Ready' : 'Not ready'}`);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã
   */
  getSystemStats() {
    return {
      isInitialized: this.isInitialized,
      isRunning: this.isRunning,
      config: this.config,
      symbolManager: this.symbolManager ? this.symbolManager.getStats() : null,
      dataManager: this.dataManager ? this.dataManager.getCacheStats() : null,
      webSocketServer: this.webSocketServer ? this.webSocketServer.getStats() : null,
      candleAggregator: this.candleAggregator ? this.candleAggregator.getCacheStats() : null,
      signalEngine: this.signalEngine ? this.signalEngine.getCacheStats() : null,
      binanceWS: this.binanceWS ? this.binanceWS.getConnectionStatus() : null
    };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ —Å –¥–µ–±–∞—É–Ω—Å–∏–Ω–≥–æ–º (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã)
   * @private
   */
  async _checkTelegramSignalsWithDebounce(symbol) {
    const now = Date.now();
    const lastCheck = this.signalCheckCooldowns.get(symbol) || 0;
    
    // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–µ–±–∞—É–Ω—Å–∏–Ω–≥ 1 —Å–µ–∫—É–Ω–¥–∞ - —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º–∞
    if (now - lastCheck < 1000) {
      return;
    }
    
    this.signalCheckCooldowns.set(symbol, now);
    await this._checkTelegramSignals(symbol);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ Telegram
   * @private
   */
  async _checkTelegramSignals(symbol) {
    if (!this.telegramBot || !this.telegramBot.isEnabled) {
      return;
    }

    try {
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª–∞
      const symbolDataResult = this.dataManager.generateSymbolData(
        symbol,
        this.dataManager.defaultSettings.percentileWindow,
        this.dataManager.defaultSettings.percentileLevel
      );

      if (!symbolDataResult || !symbolDataResult.signal) {
        return;
      }

      // –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê: signal —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤–∫–ª—é—á–∞—è NATR!
      const symbolData = symbolDataResult.signal;
      const signalData = symbolData; // signal —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –ø–æ–ª—è

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
      const lastStates = this.lastSignalStates.get(symbol) || { '1m': false, '5m': false };
      const currentStates = { '1m': false, '5m': false };

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è 1m –∏ 5m
      for (const timeframe of ['1m', '5m']) {
        const hasActiveSignal = signalData[`percentileSignal_${timeframe}`];
        const hasExpiredSignal = signalData[`percentileSignalExpired_${timeframe}`];
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –¢–û–õ–¨–ö–û –∑–µ–ª–µ–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
        currentStates[timeframe] = hasActiveSignal && !hasExpiredSignal;
        
        // –¢–û–õ–¨–ö–û –µ—Å–ª–∏ —Å–∏–≥–Ω–∞–ª –∞–∫—Ç–∏–≤–µ–Ω - –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–æ–≤—ã–π –ª–∏ –æ–Ω
        if (currentStates[timeframe]) {
          const isNewSignal = !lastStates[timeframe];
          
          // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ù–û–í–´–ï —Å–∏–≥–Ω–∞–ª—ã, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
          if (isNewSignal) {
            // NATR —Ñ–∏–ª—å—Ç—Ä –¥–ª—è 1m —Å–∏–≥–Ω–∞–ª–æ–≤ - –±–ª–æ–∫–∏—Ä—É–µ–º –Ω–∏–∑–∫–æ–≤–æ–ª–∞—Ç–∏–ª—å–Ω—ã–µ
            if (timeframe === '1m') {
              const natr = symbolData.natr30m || 0;
              
              if (natr < 0.8) {
                console.log(`üö´ FILTERED ${timeframe} SIGNAL: ${symbol} - NATR ${natr.toFixed(2)}% < 0.8%`);
                continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç —Å–∏–≥–Ω–∞–ª
              }
            }
            
            console.log(`üî• NEW ${timeframe} SIGNAL: ${symbol} - Rank: ${signalData[`percentileRank_${timeframe}`]?.toFixed(1)}%`);
            
            // –ü–µ—Ä–µ–¥–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª–∞ - —Ç–µ–ø–µ—Ä—å symbolData —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è
            await this.telegramBot.sendSignal(symbolData, timeframe);
          }
        }
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
      this.lastSignalStates.set(symbol, currentStates);
      
    } catch (error) {
      console.error(`‚ùå Error checking Telegram signals for ${symbol}:`, error);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–≤–æ–¥–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ Telegram
   */
  async sendTelegramSignalsSummary() {
    if (!this.telegramBot || !this.telegramBot.isEnabled) {
      return { success: false, error: 'Telegram bot not enabled' };
    }

    try {
      const data = this.dataManager.getPreCalculatedData();
      if (!data || !data.signals) {
        return { success: false, error: 'No signals data available' };
      }

      return await this.telegramBot.sendSignalsSummary(data.signals);
    } catch (error) {
      console.error('‚ùå Error sending Telegram signals summary:', error);
      return { success: false, error: error.message };
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram –±–æ—Ç–∞
   * @param {string} chatId - ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
   * @param {string|null} threadId - ID —Ç–µ–º—ã –≤ –≥—Ä—É–ø–ø–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   */
  async setupTelegramBot(chatId, threadId = null) {
    if (!this.telegramBot) {
      return { success: false, error: 'Telegram bot not initialized' };
    }

    return await this.telegramBot.setupChatAndThread(chatId, threadId);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
   */
  async sendTelegramTest() {
    if (!this.telegramBot || !this.telegramBot.isEnabled) {
      return { success: false, error: 'Telegram bot not enabled' };
    }

    return await this.telegramBot.sendTestMessage();
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Telegram –±–æ—Ç–∞
   */
  getTelegramStats() {
    if (!this.telegramBot) {
      return { success: false, error: 'Telegram bot not initialized' };
    }

    return this.telegramBot.getStats();
  }

  updateConfig(newConfig) {
    const oldConfig = { ...this.config };
    this.config = { ...this.config, ...newConfig };
    
    console.log('üìù System configuration updated');
    
    // –ï—Å–ª–∏ —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞, –ø—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if (this.isRunning) {
      // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
      if (this.symbolManager && (
        newConfig.minDailyVolume !== undefined || 
        newConfig.minNotional !== undefined ||
        newConfig.symbolsUpdateInterval !== undefined
      )) {
        this.symbolManager.updateSettings({
          minDailyVolume: this.config.minDailyVolume,
          minNotional: this.config.minNotional,
          updateInterval: this.config.symbolsUpdateInterval
        });
      }
      
      if (this.dataManager && (
        newConfig.defaultPercentileWindow !== undefined ||
        newConfig.defaultPercentileLevel !== undefined
      )) {
        this.dataManager.updateDefaultSettings({
          percentileWindow: this.config.defaultPercentileWindow,
          percentileLevel: this.config.defaultPercentileLevel
        });
      }
      
      // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
      if (newConfig.symbolsUpdateInterval !== undefined || 
          newConfig.dataCalculationInterval !== undefined) {
        this._stopPeriodicTasks();
        this._startPeriodicTasks();
      }
    }
    
    return { oldConfig, newConfig: this.config };
  }

  /**
   * Graceful shutdown –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
   */
  setupGracefulShutdown() {
    const shutdown = async (signal) => {
      console.log(`\nüõë Received ${signal}, shutting down gracefully...`);
      try {
        await this.stop();
        process.exit(0);
      } catch (error) {
        console.error('Error during shutdown:', error);
        process.exit(1);
      }
    };
    
    process.on('SIGINT', () => shutdown('SIGINT'));
    process.on('SIGTERM', () => shutdown('SIGTERM'));
    
    console.log('üõ°Ô∏è Graceful shutdown handlers configured');
  }
}

module.exports = SystemManager;