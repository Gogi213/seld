// memoryMonitor.cjs
// –ú–æ–¥—É–ª—å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏

class MemoryMonitor {
  constructor(options = {}) {
    this.warningThreshold = options.warningThreshold || 512 * 1024 * 1024; // 512MB
    this.criticalThreshold = options.criticalThreshold || 768 * 1024 * 1024; // 768MB
    this.checkInterval = options.checkInterval || 30000; // 30 —Å–µ–∫—É–Ω–¥
    this.cleanupCallback = options.cleanupCallback || null;
    
    this.isMonitoring = false;
    this.monitorInterval = null;
    this.lastWarning = 0;
    this.lastCritical = 0;
    this.alertCooldown = 60000; // 1 –º–∏–Ω—É—Ç–∞ –º–µ–∂–¥—É –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –∞–ª–µ—Ä—Ç–∞–º–∏
  }

  // –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
  start() {
    if (this.isMonitoring) {
      console.log('‚ö†Ô∏è Memory monitor already running');
      return;
    }

    this.isMonitoring = true;
    this.monitorInterval = setInterval(() => {
      this.checkMemoryUsage();
    }, this.checkInterval);

    console.log(`üìä Memory monitor started (warning: ${Math.round(this.warningThreshold / 1024 / 1024)}MB, critical: ${Math.round(this.criticalThreshold / 1024 / 1024)}MB)`);
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
  stop() {
    if (!this.isMonitoring) {
      return;
    }

    this.isMonitoring = false;
    if (this.monitorInterval) {
      clearInterval(this.monitorInterval);
      this.monitorInterval = null;
    }

    console.log('üìä Memory monitor stopped');
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
  checkMemoryUsage() {
    const memUsage = process.memoryUsage();
    const heapUsed = memUsage.heapUsed;
    const heapTotal = memUsage.heapTotal;
    const external = memUsage.external;
    const rss = memUsage.rss;
    
    const now = Date.now();

    // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å
    if (heapUsed > this.criticalThreshold) {
      if (now - this.lastCritical > this.alertCooldown) {
        console.error(`üö® CRITICAL: Memory usage ${Math.round(heapUsed / 1024 / 1024)}MB exceeds critical threshold ${Math.round(this.criticalThreshold / 1024 / 1024)}MB`);
        this.lastCritical = now;
        
        // –í—ã–∑—ã–≤–∞–µ–º cleanup –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if (this.cleanupCallback) {
          try {
            this.cleanupCallback('critical');
          } catch (error) {
            console.error('Error during critical cleanup:', error);
          }
        }
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π GC –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if (global.gc) {
          global.gc();
          console.log('üßπ Forced garbage collection due to critical memory usage');
        }
      }
    }
    // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
    else if (heapUsed > this.warningThreshold) {
      if (now - this.lastWarning > this.alertCooldown) {
        console.warn(`‚ö†Ô∏è WARNING: Memory usage ${Math.round(heapUsed / 1024 / 1024)}MB exceeds warning threshold ${Math.round(this.warningThreshold / 1024 / 1024)}MB`);
        this.lastWarning = now;
        
        // –í—ã–∑—ã–≤–∞–µ–º –º—è–≥–∫–∏–π cleanup
        if (this.cleanupCallback) {
          try {
            this.cleanupCallback('warning');
          } catch (error) {
            console.error('Error during warning cleanup:', error);
          }
        }
      }
    }

    // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç –∏–ª–∏ –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
    const shouldLog = (now % (5 * 60 * 1000) < this.checkInterval) || heapUsed > this.warningThreshold;
    if (shouldLog) {
      this.logMemoryStats();
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞–º—è—Ç–∏
  getMemoryStats() {
    const memUsage = process.memoryUsage();
    return {
      heapUsed: memUsage.heapUsed,
      heapTotal: memUsage.heapTotal,
      external: memUsage.external,
      rss: memUsage.rss,
      heapUsedMB: Math.round(memUsage.heapUsed / 1024 / 1024),
      heapTotalMB: Math.round(memUsage.heapTotal / 1024 / 1024),
      externalMB: Math.round(memUsage.external / 1024 / 1024),
      rssMB: Math.round(memUsage.rss / 1024 / 1024),
      warningThresholdMB: Math.round(this.warningThreshold / 1024 / 1024),
      criticalThresholdMB: Math.round(this.criticalThreshold / 1024 / 1024),
      isWarning: memUsage.heapUsed > this.warningThreshold,
      isCritical: memUsage.heapUsed > this.criticalThreshold
    };
  }

  // –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞–º—è—Ç–∏
  logMemoryStats() {
    const stats = this.getMemoryStats();
    const status = stats.isCritical ? 'üö® CRITICAL' : 
                   stats.isWarning ? '‚ö†Ô∏è WARNING' : 
                   '‚úÖ NORMAL';
    
    // console.log(`üìä Memory Status: ${status} | Heap: ${stats.heapUsedMB}/${stats.heapTotalMB}MB | External: ${stats.externalMB}MB | RSS: ${stats.rssMB}MB`);
  }

  // –û–±–Ω–æ–≤–∏—Ç—å –ø–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
  updateThresholds(warning, critical) {
    if (warning) this.warningThreshold = warning;
    if (critical) this.criticalThreshold = critical;
    console.log(`üìä Updated memory thresholds: warning=${Math.round(this.warningThreshold / 1024 / 1024)}MB, critical=${Math.round(this.criticalThreshold / 1024 / 1024)}MB`);
  }
}

module.exports = MemoryMonitor;
