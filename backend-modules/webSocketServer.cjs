// backend-modules/webSocketServer.cjs
// –ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è WebSocket —Å–µ—Ä–≤–µ—Ä–æ–º –∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏

const WebSocket = require('ws');
const { WEBSOCKET, SIGNALS, INTERVALS, EMOJIS } = require('./constants.cjs');

class WebSocketServer {
  constructor(dataManager, options = {}) {
    this.dataManager = dataManager;
    this.port = options.port || WEBSOCKET.DEFAULT_PORT;
    this.host = options.host || WEBSOCKET.DEFAULT_HOST;
    
    // WebSocket —Å–µ—Ä–≤–µ—Ä
    this.wss = null;
    
    // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ —Ö—Ä–∞–Ω–∏–º –µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    this.clientSettings = new Map(); // ws -> { percentileWindow, percentileLevel }
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    this.validation = SIGNALS.VALIDATION;
    
    // –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    this.broadcastInterval = options.broadcastInterval || INTERVALS.BROADCAST;
    this.broadcastTimer = null;
    
    // –¢–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
    this.messageTypes = WEBSOCKET.MESSAGE_TYPES;
  }

  /**
   * –ó–∞–ø—É—Å—Ç–∏—Ç—å WebSocket —Å–µ—Ä–≤–µ—Ä
   */
  start() {
    console.log(`üöÄ Starting WebSocket server on port ${this.port}...`);
    
    this.wss = new WebSocket.Server({ 
      port: this.port, 
      host: this.host 
    });
    
    console.log(`‚úÖ WebSocket server started on ws://${this.host}:${this.port}`);
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
    this.wss.on('connection', (ws) => this._handleConnection(ws));
    
    // –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    this._startBroadcastTimer();
    
    return this.wss;
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å WebSocket —Å–µ—Ä–≤–µ—Ä
   */
  stop() {
    console.log('üõë Stopping WebSocket server...');
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
    if (this.broadcastTimer) {
      clearInterval(this.broadcastTimer);
      this.broadcastTimer = null;
    }
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    if (this.wss) {
      this.wss.clients.forEach(ws => {
        if (ws.readyState === WebSocket.OPEN) {
          ws.close();
        }
      });
      
      this.wss.close();
      this.wss = null;
    }
    
    // –û—á–∏—â–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤
    this.clientSettings.clear();
    
    console.log('‚úÖ WebSocket server stopped');
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
   * @private
   */
  _handleConnection(ws) {
    console.log('üîå New client connected');
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    const defaultSettings = this.dataManager.getDefaultSettings();
    this.clientSettings.set(ws, defaultSettings);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–º—É –∫–ª–∏–µ–Ω—Ç—É
    this._sendInitialData(ws);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
    ws.on('message', (msg) => this._handleMessage(ws, msg));

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
    ws.on('close', () => this._handleDisconnection(ws));
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    ws.on('error', (error) => this._handleError(ws, error));
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–º—É –∫–ª–∏–µ–Ω—Ç—É
   * @private
   */
  _sendInitialData(ws) {
    try {
      const settings = this.clientSettings.get(ws);
      
      // –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∏ –µ—Å—Ç—å –ø—Ä–µ–¥—Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
      if (this.dataManager.isDefaultSettings(settings.percentileWindow, settings.percentileLevel)) {
        const preCalculatedData = this.dataManager.getPreCalculatedData();
        if (preCalculatedData) {
          console.log('‚ö° Sending pre-calculated data to new client');
          this._sendToClient(ws, {
            type: 'full_update',
            data: preCalculatedData
          });
          return;
        }
      }
      
      // –ò–Ω–∞—á–µ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞ –ª–µ—Ç—É
      console.log('üîÑ Calculating custom data for new client');
      const data = this.dataManager.generateClientData(settings.percentileWindow, settings.percentileLevel);
      this._sendToClient(ws, {
        type: 'full_update',
        data
      });
      
    } catch (error) {
      console.error('Error sending initial data:', error);
      this._sendError(ws, 'Failed to load initial data');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
   * @private
   */
  async _handleMessage(ws, msg) {
    try {
      const message = JSON.parse(msg);
      
      if (message.type === 'update_settings') {
        await this._handleSettingsUpdate(ws, message.data);
      } else {
        console.warn('Unknown message type:', message.type);
        this._sendError(ws, 'Unknown message type');
      }
      
    } catch (error) {
      console.error('Error processing WebSocket message:', error);
      this._sendError(ws, 'Invalid message format');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
   * @private
   */
  async _handleSettingsUpdate(ws, data) {
    try {
      const defaultSettings = this.dataManager.getDefaultSettings();
      const { 
        percentileWindow = defaultSettings.percentileWindow, 
        percentileLevel = defaultSettings.percentileLevel 
      } = data || {};
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
      const validWindow = Math.max(
        this.validation.minWindow, 
        Math.min(this.validation.maxWindow, Number(percentileWindow))
      );
      const validLevel = Math.max(
        this.validation.minLevel, 
        Math.min(this.validation.maxLevel, Number(percentileLevel))
      );
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞
      this.clientSettings.set(ws, {
        percentileWindow: validWindow,
        percentileLevel: validLevel
      });
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
      const clientData = this.dataManager.generateClientData(validWindow, validLevel);
      this._sendToClient(ws, {
        type: 'settings_update',
        data: clientData
      });
      
      console.log(`üìù Client settings updated: window=${validWindow}, level=${validLevel}`);
      
    } catch (error) {
      console.error('Error handling settings update:', error);
      this._sendError(ws, 'Failed to update settings');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
   * @private
   */
  _handleDisconnection(ws) {
    console.log('üîå Client disconnected');
    this.clientSettings.delete(ws);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ WebSocket
   * @private
   */
  _handleError(ws, error) {
    console.error('WebSocket error:', error);
    this.clientSettings.delete(ws);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
   * @private
   */
  _sendToClient(ws, message) {
    if (ws.readyState === WebSocket.OPEN) {
      // ...
      ws.send(JSON.stringify(message));
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É –∫–ª–∏–µ–Ω—Ç—É
   * @private
   */
  _sendError(ws, errorMessage) {
    this._sendToClient(ws, {
      type: 'error',
      message: errorMessage
    });
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
   */
  broadcastToClients() {
    if (!this.wss || this.wss.clients.size === 0) return;
    
    this.wss.clients.forEach(ws => {
      if (ws.readyState === WebSocket.OPEN) {
        try {
          const settings = this.clientSettings.get(ws) || this.dataManager.getDefaultSettings();
          const clientData = this.dataManager.generateClientData(settings.percentileWindow, settings.percentileLevel);
          
          this._sendToClient(ws, {
            type: 'periodic_update',
            data: clientData
          });
          
        } catch (error) {
          console.error('Error sending periodic update to client:', error);
        }
      }
    });
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
   */
  broadcastSymbolUpdate(symbol) {
    if (!this.wss || this.wss.clients.size === 0) return;
    
    this.wss.clients.forEach(ws => {
      if (ws.readyState === WebSocket.OPEN) {
        try {
          const settings = this.clientSettings.get(ws) || this.dataManager.getDefaultSettings();
          const symbolData = this.dataManager.generateSymbolData(
            symbol, 
            settings.percentileWindow, 
            settings.percentileLevel
          );
          
          if (symbolData) {
            this._sendToClient(ws, {
              type: 'symbol_update',
              symbol,
              data: symbolData
            });
          }
          
        } catch (error) {
          console.error('Error sending symbol update:', error);
        }
      }
    });
  }

  /**
   * –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
   * @private
   */
  _startBroadcastTimer() {
    if (this.broadcastTimer) {
      clearInterval(this.broadcastTimer);
    }
    
    this.broadcastTimer = setInterval(() => {
      if (this.wss && this.wss.clients.size > 0) {
        this.broadcastToClients();
      }
    }, this.broadcastInterval);
    
    console.log(`‚è∞ Broadcast timer started (interval: ${this.broadcastInterval}ms)`);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Ä–≤–µ—Ä–∞
   */
  getStats() {
    return {
      isRunning: !!this.wss,
      clientsCount: this.wss ? this.wss.clients.size : 0,
      port: this.port,
      host: this.host,
      broadcastInterval: this.broadcastInterval,
      clientSettings: Array.from(this.clientSettings.values())
    };
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
   */
  getClientsCount() {
    return this.wss ? this.wss.clients.size : 0;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–µ—Ä–≤–µ—Ä
   */
  isRunning() {
    return !!this.wss;
  }
}

module.exports = WebSocketServer;