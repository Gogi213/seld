// backend-modules/symbolManager.cjs
// –ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏

const BinanceApiService = require('./binanceApi.cjs');
const { FILTERS, INTERVALS, EMOJIS } = require('./constants.cjs');

class SymbolManager {
  constructor(candleAggregator, binanceWS, options = {}) {
    this.candleAggregator = candleAggregator;
    this.binanceWS = binanceWS;
    this.binanceApi = new BinanceApiService();
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    this.minDailyVolume = options.minDailyVolume || FILTERS.MIN_DAILY_VOLUME;
    this.minNotional = options.minNotional || FILTERS.MIN_NOTIONAL;
    this.historicalLimit = options.historicalLimit || FILTERS.HISTORICAL_CANDLES_LIMIT;
    this.natrPeriod = options.natrPeriod || FILTERS.NATR_CALCULATION_PERIOD;
    
    // –ö—ç—à –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –∏—Ö –¥–∞–Ω–Ω—ã—Ö
    this.activeSymbols = new Set();
    this.symbolsData = new Map(); // symbol -> { dailyVolume, natr30m, etc. }
    this.lastSymbolsUpdate = 0;
    this.updateInterval = options.updateInterval || INTERVALS.SYMBOLS_UPDATE;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
   */
  getActiveSymbols() {
    return Array.from(this.activeSymbols);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª–∞
   */
  getSymbolData(symbol) {
    return this.symbolsData.get(symbol);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª–æ–≤
   */
  getAllSymbolsData() {
    return new Map(this.symbolsData);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
   */
  getActiveSymbolsCount() {
    return this.activeSymbols.size;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤
   */
  shouldUpdateSymbols() {
    return Date.now() - this.lastSymbolsUpdate > this.updateInterval;
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
   */
  async updateActiveSymbols() {
    try {
      console.log(`${EMOJIS.LOADING} Updating active symbols...`);
      const startTime = Date.now();
      
      const symbols = await this.binanceApi.getFuturesSymbols();
      const tickers = await this.binanceApi.get24hTickers();
      const tickerMap = Object.fromEntries(tickers.map(t => [t.symbol, t]));
      
      const newActiveSymbols = new Set();
      const newSymbolsData = new Map();
      
      console.log(`${EMOJIS.CHART} Filtering symbols from ${symbols.length} total...`);
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–∏–º–≤–æ–ª—ã –ø–æ –æ–±—ä–µ–º—É –∏ NATR
      for (const symbol of symbols) {
        const ticker = tickerMap[symbol];
        if (!ticker) continue;
        
        const dailyVolume = parseFloat(ticker.quoteVolume);
        if (dailyVolume < this.minDailyVolume) continue;
        
        try {
          // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ NATR
          const historicalKlines = await this.binanceApi.getHistoricalKlines(symbol, 4000);
          if (historicalKlines.length < 30) continue;
          
          // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º NATR –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 30 —Å–≤–µ—á–∞—Ö
          const natr = this.binanceApi.calculateNATR(historicalKlines, 30);
          
          if (natr >= this.minNotional) {
            newActiveSymbols.add(symbol);
            newSymbolsData.set(symbol, {
              dailyVolume,
              natr30m: natr,
              lastUpdate: Date.now()
            });
            
            // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º –í–°–ï –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä
            console.log(`üìà Loading ${historicalKlines.length} historical candles for ${symbol}`);
            for (const candle of historicalKlines) {
              this.candleAggregator.addMinuteCandle(symbol, candle);
            }
          }
        } catch (error) {
          console.error(`Error processing ${symbol}:`, error.message);
        }
      }
      
      console.log(`‚úÖ Filtered to ${newActiveSymbols.size} active symbols`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ WebSocket
      await this._updateWebSocketSubscriptions(newActiveSymbols);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
      this.activeSymbols = newActiveSymbols;
      this.symbolsData = newSymbolsData;
      this.lastSymbolsUpdate = Date.now();
      
      const updateTime = Date.now() - startTime;
      console.log(`üìà Active symbols updated in ${updateTime}ms: ${this.activeSymbols.size} total`);
      
      return {
        added: Array.from(newActiveSymbols).filter(s => !this.activeSymbols.has(s)),
        removed: Array.from(this.activeSymbols).filter(s => !newActiveSymbols.has(s)),
        total: newActiveSymbols.size
      };
      
    } catch (error) {
      console.error('Error updating active symbols:', error);
      throw error;
    }
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å WebSocket –ø–æ–¥–ø–∏—Å–∫–∏
   * @private
   */
  async _updateWebSocketSubscriptions(newActiveSymbols) {
    const currentSymbols = Array.from(this.activeSymbols);
    const newSymbolsArray = Array.from(newActiveSymbols);
    
    // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    const toUnsubscribe = currentSymbols.filter(s => !newActiveSymbols.has(s));
    for (const symbol of toUnsubscribe) {
      this.binanceWS.unsubscribeFromSymbol(symbol);
    }
    
    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –Ω–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
    const toSubscribe = newSymbolsArray.filter(s => !this.activeSymbols.has(s));
    if (toSubscribe.length > 0) {
      this.binanceWS.subscribeToSymbols(toSubscribe);
    }
    
    console.log(`üîÑ WebSocket subscriptions: +${toSubscribe.length} -${toUnsubscribe.length}`);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–∏–º–≤–æ–ª–æ–≤
   */
  getStats() {
    return {
      activeSymbolsCount: this.activeSymbols.size,
      lastUpdate: this.lastSymbolsUpdate,
      updateInterval: this.updateInterval,
      minDailyVolume: this.minDailyVolume,
      minNotional: this.minNotional
    };
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
   */
  updateSettings(settings) {
    if (settings.minDailyVolume !== undefined) {
      this.minDailyVolume = settings.minDailyVolume;
    }
    if (settings.minNotional !== undefined) {
      this.minNotional = settings.minNotional;
    }
    if (settings.updateInterval !== undefined) {
      this.updateInterval = settings.updateInterval;
    }
    
    console.log(`${EMOJIS.MEMO} Symbol manager settings updated:`, {
      minDailyVolume: this.minDailyVolume,
      minNotional: this.minNotional,
      updateInterval: this.updateInterval
    });
  }
}

module.exports = SymbolManager;