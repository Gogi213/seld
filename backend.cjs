// backend.cjs
// –ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ –≤—Å–µ–º –º–æ–Ω–µ—Ç–∞–º Binance Futures

const axios = require('axios');
const VolumeSignalEngine = require('./signalEngine.cjs');

const MIN_DAILY_VOLUME = 20000000; // 20 –º–ª–Ω —Å—É—Ç–æ—á–Ω–æ–≥–æ –æ–±—ä—ë–º–∞
const MIN_NOTIONAL = 0.4; // 0.4 yfnh

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–µ—Ñ–æ–ª—Ç—ã, –Ω–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –º–æ–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å —Å–≤–æ–∏
const SMA_LENGTH = 200;
const DEFAULT_PERCENTILE_WINDOW = 50;
const DEFAULT_PERCENTILE_LEVEL = 5;

async function getFuturesSymbols() {
  const res = await axios.get('https://fapi.binance.com/fapi/v1/exchangeInfo');
  return res.data.symbols
    .filter(s => s.contractType === 'PERPETUAL' && s.status === 'TRADING')
    .map(s => s.symbol);
}

async function get24hTickers() {
  const res = await axios.get('https://fapi.binance.com/fapi/v1/ticker/24hr');
  // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —Å symbol, quoteVolume –∏ –¥—Ä.
  return res.data;
}

async function getLast30mKlines(symbol) {
  const url = `https://fapi.binance.com/fapi/v1/klines?symbol=${symbol}&interval=1m&limit=30`;
  const res = await axios.get(url);
  return res.data.map(k => ({
    openTime: k[0],
    open: +k[1],
    high: +k[2],
    low: +k[3],
    close: +k[4],
    volume: +k[5],
    quoteVolume: +k[7],
    trades: +k[8]
  }));
}


const WebSocket = require('ws');
console.log('üöÄ Starting WebSocket server on port 3001...');
const wss = new WebSocket.Server({ port: 3001, host: '0.0.0.0' });

console.log('‚úÖ WebSocket server started on ws://0.0.0.0:3001');

// –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ —Ö—Ä–∞–Ω–∏–º –µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Å–∏–≥–Ω–∞–ª—ã
const clientSettings = new Map(); // ws -> { percentileWindow, percentileLevel }
const clientSignals = new Map();  // ws -> signals

// –§–æ–Ω–æ–≤—ã–π –∫—ç—à –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è (–ø–æ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º)
let cachedSignals = [];
let cachedAt = 0;

// –§–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É
async function updateCachedSignals() {
  cachedSignals = await calculateSignals(DEFAULT_PERCENTILE_WINDOW, DEFAULT_PERCENTILE_LEVEL);
  cachedAt = Date.now();
}
setInterval(updateCachedSignals, 60 * 1000);
updateCachedSignals();

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á—ë—Ç–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ (–º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏)
async function calculateSignals(percentileWindow, percentileLevel) {
  const symbols = await getFuturesSymbols();
  const tickers = await get24hTickers();
  const tickerMap = Object.fromEntries(tickers.map(t => [t.symbol, t]));
  const filtered = [];
  // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É—Å–∫–æ—Ä—è–µ–º: concurrency 200, –∫—ç—à —Å–≤–µ—á–µ–π –Ω–∞ 30 —Å–µ–∫, –ª–æ–≥ –≤—Ä–µ–º–µ–Ω–∏ —ç—Ç–∞–ø–æ–≤
  const concurrency = 200;
  const results = [];
  const klineCache = new Map(); // key: symbol+tf, value: {data, ts}
  const KLINE_CACHE_TTL = 30 * 1000;
  const getKlines = async (symbol, tf, limit) => {
    const key = symbol + '_' + tf + '_' + limit;
    const now = Date.now();
    if (klineCache.has(key)) {
      const cached = klineCache.get(key);
      if (now - cached.ts < KLINE_CACHE_TTL) return cached.data;
    }
    const url = `https://fapi.binance.com/fapi/v1/klines?symbol=${symbol}&interval=${tf}&limit=${limit}`;
    const res = await axios.get(url);
    klineCache.set(key, { data: res.data, ts: now });
    return res.data;
  };
  const t0 = Date.now();
  for (let i = 0; i < symbols.length; i += concurrency) {
    const chunk = symbols.slice(i, i + concurrency);
    const chunkResults = await Promise.all(chunk.map(async (symbol) => {
    try {
      const ticker = tickerMap[symbol];
      if (!ticker) return;
      const dailyVolume = parseFloat(ticker.quoteVolume);
      if (dailyVolume < MIN_DAILY_VOLUME) return;
      // –ö—ç—à–∏—Ä—É–µ–º 30m klines
      const klines30 = (await getKlines(symbol, '1m', 30)).map(k => ({
        openTime: k[0], open: +k[1], high: +k[2], low: +k[3], close: +k[4], volume: +k[5], quoteVolume: +k[7], trades: +k[8]
      }));
      // NATR = ATR / Close * 100, ATR –ø–æ 30 –º–∏–Ω—É—Ç–∞–º
      let atr = 0;
      for (let i = 1; i < klines30.length; i++) {
        const prev = klines30[i-1];
        const curr = klines30[i];
        const tr = Math.max(
          curr.high - curr.low,
          Math.abs(curr.high - prev.close),
          Math.abs(curr.low - prev.close)
        );
        atr += tr;
      }
      atr = atr / (klines30.length - 1);
      const lastClose = klines30[klines30.length-1]?.close;
      const natr = lastClose ? (atr / lastClose) * 100 : 0;
      if (natr < MIN_NOTIONAL) return;
      // --- Percentile Signals for 1m, 3m, 5m, 15m, 30m ---
      const tfList = [
        { key: '1m', label: '1m', durationMs: 1 * 60 * 1000, expirePeriods: 3 }, // 1m –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ 3 —Å–≤–µ—á–∏
        { key: '3m', label: '3m', durationMs: 3 * 60 * 1000, expirePeriods: 1 }, // –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–µ—Ä–µ–∑ 1 —Å–≤–µ—á—É
        { key: '5m', label: '5m', durationMs: 5 * 60 * 1000, expirePeriods: 1 },
        { key: '15m', label: '15m', durationMs: 15 * 60 * 1000, expirePeriods: 1 },
        { key: '30m', label: '30m', durationMs: 30 * 60 * 1000, expirePeriods: 1 }
      ];
      const percentileSignals = {};
      const currentTime = Date.now();
      
      for (const tf of tfList) {
        // –ö—ç—à–∏—Ä—É–µ–º klines –¥–ª—è –∫–∞–∂–¥–æ–≥–æ tf
        const tfKlines = await getKlines(symbol, tf.key, percentileWindow);
        const volumes = tfKlines.map(k => +k[5]);
        const timestamps = tfKlines.map(k => +k[0]);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ó–ê–ö–†–´–¢–£–Æ —Å–≤–µ—á—É (–Ω–µ —Ç–µ–∫—É—â—É—é —Ñ–æ—Ä–º–∏—Ä—É—é—â—É—é—Å—è)
        const lastClosedIndex = volumes.length - 2; // –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω—è—è —Å–≤–µ—á–∞ —Ç–æ—á–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞
        const lastVolume = volumes[lastClosedIndex];
        const lastCandleTime = timestamps[lastClosedIndex];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
        if (lastVolume === undefined || lastCandleTime === undefined) {
          percentileSignals[`percentileRank_${tf.key}`] = null;
          percentileSignals[`percentileSignal_${tf.key}`] = false;
          percentileSignals[`percentileSignalExpired_${tf.key}`] = false;
          percentileSignals[`cellState_${tf.key}`] = {
            hasActiveSignal: false,
            hasExpiredSignal: false,
            style: {}
          };
          continue;
        }
        
        // –†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—è –¥–ª—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö (–∏—Å–∫–ª—é—á–∞—è –ø–æ—Å–ª–µ–¥–Ω—é—é —Ñ–æ—Ä–º–∏—Ä—É—é—â—É—é—Å—è —Å–≤–µ—á—É)
        const historicalVolumes = volumes.slice(0, -1); // —É–±–∏—Ä–∞–µ–º —Ç–µ–∫—É—â—É—é —Ñ–æ—Ä–º–∏—Ä—É—é—â—É—é—Å—è
        const sorted = [...historicalVolumes].sort((a, b) => a - b);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é (–ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–∫—Ä—ã—Ç—É—é) —Å–≤–µ—á—É
        let rank = 0;
        for (let i = 0; i < sorted.length; i++) {
          if (sorted[i] < lastVolume) rank++;
          else break;
        }
        const denom = Math.max(sorted.length - 1, 1);
        const percentileRank = (rank / denom) * 100;
        const currentHasSignal = percentileRank <= percentileLevel;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–≤–µ—á–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ (–¥–ª—è –ø—Ä–æ—Ç—É—Ö—à–∏—Ö)
        let foundExpiredSignal = false;
        const checkPeriods = tf.expirePeriods; // —Å–∫–æ–ª—å–∫–æ –ø–µ—Ä–∏–æ–¥–æ–≤ –Ω–∞–∑–∞–¥ –ø—Ä–æ–≤–µ—Ä—è–µ–º
        
        for (let periodBack = 1; periodBack <= checkPeriods; periodBack++) {
          const checkIndex = lastClosedIndex - periodBack;
          if (checkIndex >= 0 && checkIndex < volumes.length - 1) {
            const checkVolume = volumes[checkIndex];
            const checkTime = timestamps[checkIndex];
            
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å –¥–ª—è —ç—Ç–æ–π —Å–≤–µ—á–∏
            let checkRank = 0;
            for (let i = 0; i < sorted.length; i++) {
              if (sorted[i] < checkVolume) checkRank++;
              else break;
            }
            const checkPercentileRank = (checkRank / denom) * 100;
            const hadSignal = checkPercentileRank <= percentileLevel;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å—Ç–µ–∫ –ª–∏ —ç—Ç–æ—Ç —Å–∏–≥–Ω–∞–ª
            if (hadSignal) {
              const signalAge = currentTime - (checkTime + tf.durationMs);
              const expireTime = tf.durationMs * tf.expirePeriods;
              if (signalAge <= expireTime) {
                // –°–∏–≥–Ω–∞–ª –µ—â—ë –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å—Ç–µ–∫
                if (!currentHasSignal) {
                  foundExpiredSignal = true;
                  // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                  if (symbol === 'MUSDT') {
                    console.log(`üîç MUSDT ${tf.key}: –ù–∞–π–¥–µ–Ω –ø—Ä–æ—Ç—É—Ö—à–∏–π —Å–∏–≥–Ω–∞–ª –Ω–∞ ${periodBack} —Å–≤–µ—á–µ–π –Ω–∞–∑–∞–¥ (${checkPercentileRank.toFixed(2)}% <= ${percentileLevel}%)`);
                  }
                }
              }
            }
          }
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–∏–≥–Ω–∞–ª–∞ —Å —É—á–µ—Ç–æ–º —Ä–∞–∑–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤ –∏—Å—Ç–µ—á–µ–Ω–∏—è
        const signalAge = currentTime - (lastCandleTime + tf.durationMs);
        const expireTime = tf.durationMs * tf.expirePeriods;
        const isCurrentExpired = currentHasSignal && signalAge > expireTime;
        
        percentileSignals[`percentileRank_${tf.key}`] = percentileRank;
        percentileSignals[`percentileSignal_${tf.key}`] = currentHasSignal && !isCurrentExpired;
        percentileSignals[`percentileSignalExpired_${tf.key}`] = isCurrentExpired || foundExpiredSignal;
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º cellState –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
        const hasActiveSignal = percentileSignals[`percentileSignal_${tf.key}`];
        const hasExpiredSignal = percentileSignals[`percentileSignalExpired_${tf.key}`];
        
        const cellState = {
          hasActiveSignal,
          hasExpiredSignal,
          style: {}
        };
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        if (hasActiveSignal) {
          cellState.style = {
            background: 'linear-gradient(135deg, #1e3a8a 0%, #3b82f6 100%)',
            boxShadow: '0 0 8px rgba(59, 130, 246, 0.6), inset 0 1px 2px rgba(255,255,255,0.1)',
            border: '1px solid #3b82f6'
          };
        } else if (hasExpiredSignal) {
          cellState.style = {
            background: 'linear-gradient(135deg, #92400e 0%, #f59e0b 100%)',
            boxShadow: '0 0 6px rgba(245, 158, 11, 0.4), inset 0 1px 2px rgba(255,255,255,0.1)',
            border: '1px solid #f59e0b'
          };
        }
        
        percentileSignals[`cellState_${tf.key}`] = cellState;
      }

      return {
        symbol,
        dailyVolume,
        natr30m: natr,
        ...percentileSignals
      };
      // –ú–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å console.log –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
    } catch (e) {
      // –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—à–∏–±–∫—É –ø–æ –º–æ–Ω–µ—Ç–µ
      return null;
    }
  }));
    results.push(...chunkResults.filter(Boolean));
  }
  // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ natr30m –ø–æ —É–±—ã–≤–∞–Ω–∏—é
  results.sort((a, b) => (b.natr30m || 0) - (a.natr30m || 0));
  const t1 = Date.now();
  
  // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
  const signalStats = {
    totalCoins: results.length,
    activeSignals: {},
    expiredSignals: {}
  };
  
  const tfList = ['1m', '3m', '5m', '15m', '30m'];
  tfList.forEach(tf => {
    signalStats.activeSignals[tf] = results.filter(r => r[`percentileSignal_${tf}`]).length;
    signalStats.expiredSignals[tf] = results.filter(r => r[`percentileSignalExpired_${tf}`]).length;
  });
  
  console.log(`[${new Date().toISOString()}] –°–∏–≥–Ω–∞–ª—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∑–∞ ${t1 - t0}–º—Å:`, 
              `–ú–æ–Ω–µ—Ç: ${signalStats.totalCoins}`, 
              `–ê–∫—Ç–∏–≤–Ω—ã–µ:`, signalStats.activeSignals,
              `–ò—Å—Ç–µ–∫—à–∏–µ:`, signalStats.expiredSignals);
  
  // –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
  if (Object.values(signalStats.activeSignals).some(count => count > 0)) {
    console.log("üê∏ –ê–ö–¢–ò–í–ù–´–ï –°–ò–ì–ù–ê–õ–´:");
    tfList.forEach(tf => {
      const activeCoins = results.filter(r => r[`percentileSignal_${tf}`]);
      if (activeCoins.length > 0) {
        console.log(`  ${tf}: ${activeCoins.map(c => `${c.symbol}(${c[`percentileRank_${tf}`]?.toFixed(1)}%)`).join(', ')}`);
      }
    });
  }
  
  return results;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
wss.on('connection', (ws) => {
  console.log('üîå New client connected');
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  clientSettings.set(ws, {
    percentileWindow: DEFAULT_PERCENTILE_WINDOW,
    percentileLevel: DEFAULT_PERCENTILE_LEVEL
  });

  // –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî –æ–∂–∏–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
  ws.on('message', async (msg) => {
    try {
      const data = JSON.parse(msg);
      let { percentileWindow, percentileLevel } = data;
      percentileWindow = Math.max(5, Math.min(200, Number(percentileWindow) || DEFAULT_PERCENTILE_WINDOW));
      percentileLevel = Math.max(0, Math.min(100, Number(percentileLevel) || DEFAULT_PERCENTILE_LEVEL));
      clientSettings.set(ws, { percentileWindow, percentileLevel });
      // –°—á–∏—Ç–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
      ws.send(JSON.stringify([{ loading: true }])); // –î–ª—è UX: –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É
      const signals = await calculateSignals(percentileWindow, percentileLevel);
      clientSignals.set(ws, signals);
      ws.send(JSON.stringify(signals));
    } catch (e) {
      ws.send(JSON.stringify([]));
    }
  });

  // –ü—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—ç—à (–±—ã—Å—Ç—Ä–æ), –ø–æ—Ç–æ–º –∫–ª–∏–µ–Ω—Ç –º–æ–∂–µ—Ç –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Å–≤–æ–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  ws.send(JSON.stringify(cachedSignals));

  ws.on('close', () => {
    clientSettings.delete(ws);
    clientSignals.delete(ws);
  });
});
