// enhancedSignalEngine.cjs
// –£–ª—É—á—à–µ–Ω–Ω—ã–π –¥–≤–∏–∂–æ–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏

class EnhancedSignalEngine {
  constructor(candleAggregator) {
    this.candleAggregator = candleAggregator;
    
    // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ - –æ–¥–∏–Ω –¥–≤–∏–∂–æ–∫ –¥–ª—è –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤
    this.sharedSignalEngine = null;
    this.signalCache = new Map(); // symbol -> signals for all timeframes
    this.lastUpdateTime = new Map(); // symbol -> timestamp
    
    // –õ–∏–º–∏—Ç—ã –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏
    this.maxCacheEntries = 100; // –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤ –≤ –∫—ç—à–µ
    this.cacheExpiryMs = 5 * 60 * 1000; // –ö—ç—à –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    this.defaultSettings = {
      smaLength: 200,
      thresholdPercent: 50,
      percentileWindow: 50,
      percentileLevel: 1
    };
    
    // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã
    this.timeframes = ['1m', '5m', '15m', '30m', '1h'];
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
    this.expireSettings = {
      '1m': { expirePeriods: 3 }, // 1m –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ 3 —Å–≤–µ—á–∏ (3 –º–∏–Ω—É—Ç—ã)
      '5m': { expirePeriods: 1 }, // 5m –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ 1 —Å–≤–µ—á—É (5 –º–∏–Ω—É—Ç)
      '15m': { expirePeriods: 1 }, // 15m –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ 1 —Å–≤–µ—á—É (15 –º–∏–Ω—É—Ç)
      '30m': { expirePeriods: 1 }, // 30m –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ 1 —Å–≤–µ—á—É (30 –º–∏–Ω—É—Ç)
      '1h': { expirePeriods: 1 }   // 1h –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ 1 —Å–≤–µ—á—É (1 —á–∞—Å)
    };
    
    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
    this.cleanupInterval = setInterval(() => {
      this.cleanupExpiredCache();
    }, 60000); // –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
  }

  // –û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  updateSettings(settings) {
    this.defaultSettings = { ...this.defaultSettings, ...settings };
    // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—ã–π –¥–≤–∏–∂–æ–∫ —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    this.sharedSignalEngine = null;
    // –û—á–∏—â–∞–µ–º –∫—ç—à –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    this.signalCache.clear();
    this.lastUpdateTime.clear();
  }

  // –ü–æ–ª—É—á–∏—Ç—å –µ–¥–∏–Ω—ã–π –¥–≤–∏–∂–æ–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ (–ª–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è)
  getSharedSignalEngine() {
    if (!this.sharedSignalEngine) {
      const VolumeSignalEngine = require('./signalEngine.cjs');
      this.sharedSignalEngine = new VolumeSignalEngine(
        this.defaultSettings.smaLength,
        this.defaultSettings.thresholdPercent,
        this.defaultSettings.percentileWindow,
        this.defaultSettings.percentileLevel
      );
    }
    return this.sharedSignalEngine;
  }

  // –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ –∫—ç—à–∞
  cleanupExpiredCache() {
    const now = Date.now();
    let cleanedEntries = 0;
    
    for (const [symbol, updateTime] of this.lastUpdateTime.entries()) {
      if (now - updateTime > this.cacheExpiryMs) {
        this.signalCache.delete(symbol);
        this.lastUpdateTime.delete(symbol);
        cleanedEntries++;
      }
    }
    
    // –ï—Å–ª–∏ –∫—ç—à —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, —É–¥–∞–ª—è–µ–º —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
    if (this.signalCache.size > this.maxCacheEntries) {
      const entries = Array.from(this.lastUpdateTime.entries());
      entries.sort((a, b) => a[1] - b[1]); // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
      
      const toRemove = this.signalCache.size - this.maxCacheEntries;
      for (let i = 0; i < toRemove; i++) {
        const symbol = entries[i][0];
        this.signalCache.delete(symbol);
        this.lastUpdateTime.delete(symbol);
        cleanedEntries++;
      }
    }
    
    if (cleanedEntries > 0) {
      console.log(`üßπ SignalEngine: cleaned ${cleanedEntries} expired cache entries`);
    }
  }

  // –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è —Å–∏–º–≤–æ–ª–∞ –Ω–∞ –≤—Å–µ—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞—Ö
  calculateSignalsForSymbol(symbol) {
    const currentTime = Date.now();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à - —Å–æ–∫—Ä–∞—Ç–∏–ª–∏ –≤—Ä–µ–º—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å 30 –¥–æ 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    const cached = this.signalCache.get(symbol);
    const lastUpdate = this.lastUpdateTime.get(symbol);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à, –µ—Å–ª–∏ –æ–Ω —Å–≤–µ–∂–∏–π (–º–µ–Ω–µ–µ 5 —Å–µ–∫—É–Ω–¥)
    if (cached && lastUpdate && (currentTime - lastUpdate < 5000)) {
      return cached;
    }
    
    const signals = {};
    
    for (const tf of this.timeframes) {
      try {
        const tfSignals = this.calculateSignalsForTimeframe(symbol, tf, currentTime);
        Object.assign(signals, tfSignals);
      } catch (error) {
        console.error(`Error calculating signals for ${symbol} ${tf}:`, error);
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç—ã–µ —Å–∏–≥–Ω–∞–ª—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ
        this.setEmptySignals(signals, tf);
      }
    }
    
    // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    this.signalCache.set(symbol, signals);
    this.lastUpdateTime.set(symbol, currentTime);
    
    return signals;
  }

  // –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
  calculateSignalsForTimeframe(symbol, timeframe, currentTime) {
    const signals = {};
    
    // –ü–æ–ª—É—á–∞–µ–º –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–≤–µ—á–∏
    const candles = this.candleAggregator.getAggregatedCandles(
      symbol,
      timeframe,
      4000
    );
    
    if (candles.length < this.defaultSettings.percentileWindow + 1) {
      this.setEmptySignals(signals, timeframe);
      return signals;
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ó–ê–ö–†–´–¢–£–Æ —Å–≤–µ—á—É (–∏—Å–∫–ª—é—á–∞—è —Ñ–æ—Ä–º–∏—Ä—É—é—â—É—é—Å—è)
    const lastClosedIndex = candles.length - 2;
    if (lastClosedIndex < this.defaultSettings.percentileWindow) {
      this.setEmptySignals(signals, timeframe);
      return signals;
    }
    
    const lastCandle = candles[lastClosedIndex];
    const lastCandleTime = lastCandle.openTime;
    const lastVolume = lastCandle.volume;
    
    // –ë–µ—Ä–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—è (–∏—Å–∫–ª—é—á–∞—è —Ç–µ–∫—É—â—É—é –∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ —Å–≤–µ—á–∏)
    const historicalCandles = candles.slice(0, lastClosedIndex);
    const historicalVolumes = historicalCandles.slice(-this.defaultSettings.percentileWindow);
    
    if (historicalVolumes.length < this.defaultSettings.percentileWindow) {
      this.setEmptySignals(signals, timeframe);
      return signals;
    }
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å
    const sorted = [...historicalVolumes.map(c => c.volume)].sort((a, b) => a - b);
    let rank = 0;
    for (let i = 0; i < sorted.length; i++) {
      if (sorted[i] < lastVolume) rank++;
      else break;
    }
    
    const denom = Math.max(sorted.length - 1, 1);
    const percentileRank = (rank / denom) * 100;
    const currentHasSignal = percentileRank <= this.defaultSettings.percentileLevel;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–≤–µ—á–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ—Ç—É—Ö—à–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
    let foundExpiredSignal = false;
    const expireSettings = this.expireSettings[timeframe];
    const checkPeriods = expireSettings.expirePeriods;
    
    for (let periodBack = 1; periodBack <= checkPeriods; periodBack++) {
      const checkIndex = lastClosedIndex - periodBack;
      if (checkIndex >= this.defaultSettings.percentileWindow && checkIndex < candles.length - 1) {
        const checkCandle = candles[checkIndex];
        const checkVolume = checkCandle.volume;
        const checkTime = checkCandle.openTime;
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å –¥–ª—è —ç—Ç–æ–π —Å–≤–µ—á–∏
        const checkHistoricalVolumes = candles.slice(0, checkIndex).slice(-this.defaultSettings.percentileWindow);
        const checkSorted = [...checkHistoricalVolumes.map(c => c.volume)].sort((a, b) => a - b);
        
        let checkRank = 0;
        for (let i = 0; i < checkSorted.length; i++) {
          if (checkSorted[i] < checkVolume) checkRank++;
          else break;
        }
        
        const checkPercentileRank = (checkRank / Math.max(checkSorted.length - 1, 1)) * 100;
        const hadSignal = checkPercentileRank <= this.defaultSettings.percentileLevel;
        
        if (hadSignal) {
          const intervalMs = this.getIntervalMs(timeframe);
          const signalAge = currentTime - (checkTime + intervalMs);
          const expireTime = intervalMs * checkPeriods;
          
          if (signalAge <= expireTime) {
            if (!currentHasSignal) {
              foundExpiredSignal = true;
            }
          }
        }
      }
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ç–µ–∫—É—â–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
    const intervalMs = this.getIntervalMs(timeframe);
    const signalAge = currentTime - (lastCandleTime + intervalMs);
    const expireTime = intervalMs * expireSettings.expirePeriods;
    
    // –î–ª—è —Å–≤–µ–∂–µ–∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–≤–µ—á–µ–π –¥–∞–µ–º "–±—É—Ñ–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è" 30 —Å–µ–∫—É–Ω–¥, —á—Ç–æ–±—ã —Å–∏–≥–Ω–∞–ª –Ω–µ —Å—Ä–∞–∑—É —Å—Ç–∞–ª –ø—Ä–æ—Ç—É—Ö—à–∏–º
    const bufferTime = 30000; // 30 —Å–µ–∫—É–Ω–¥ –±—É—Ñ–µ—Ä
    const isCurrentExpired = currentHasSignal && signalAge > (expireTime + bufferTime);
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    signals[`percentileRank_${timeframe}`] = percentileRank;
    signals[`percentileSignal_${timeframe}`] = currentHasSignal && !isCurrentExpired;
    signals[`percentileSignalExpired_${timeframe}`] = isCurrentExpired || foundExpiredSignal;
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º cellState –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    const hasActiveSignal = signals[`percentileSignal_${timeframe}`];
    const hasExpiredSignal = signals[`percentileSignalExpired_${timeframe}`];
    
    const cellState = {
      hasActiveSignal,
      hasExpiredSignal,
      style: {}
    };
    
    if (hasActiveSignal) {
      cellState.style = {
        background: 'linear-gradient(135deg, #1e3a8a 0%, #3b82f6 100%)',
        boxShadow: '0 0 8px rgba(59, 130, 246, 0.6), inset 0 1px 2px rgba(255,255,255,0.1)',
        border: '1px solid #3b82f6'
      };
    } else if (hasExpiredSignal) {
      cellState.style = {
        background: 'linear-gradient(135deg, #92400e 0%, #f59e0b 100%)',
        boxShadow: '0 0 6px rgba(245, 158, 11, 0.4), inset 0 1px 2px rgba(255,255,255,0.1)',
        border: '1px solid #f59e0b'
      };
    }
    
    signals[`cellState_${timeframe}`] = cellState;
    
    return signals;
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—É—Å—Ç—ã–µ —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
  setEmptySignals(signals, timeframe) {
    signals[`percentileRank_${timeframe}`] = null;
    signals[`percentileSignal_${timeframe}`] = false;
    signals[`percentileSignalExpired_${timeframe}`] = false;
    signals[`cellState_${timeframe}`] = {
      hasActiveSignal: false,
      hasExpiredSignal: false,
      style: {}
    };
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
  getIntervalMs(timeframe) {
    const intervals = {
      '1m': 1 * 60 * 1000,
      '5m': 5 * 60 * 1000,
      '15m': 15 * 60 * 1000,
      '30m': 30 * 60 * 1000,
      '1h': 60 * 60 * 1000
    };
    return intervals[timeframe] || 60 * 1000;
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
  getCachedSignals(symbol) {
    return this.signalCache.get(symbol) || {};
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å–∏–≥–Ω–∞–ª—ã
  shouldUpdateSignals(symbol, maxAge = 5000) { // 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    const lastUpdate = this.lastUpdateTime.get(symbol);
    if (!lastUpdate) return true;
    
    return (Date.now() - lastUpdate) > maxAge;
  }

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–∏–º–≤–æ–ª—ã —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Å–∏–≥–Ω–∞–ª–∞–º–∏
  getCachedSymbols() {
    return Array.from(this.signalCache.keys());
  }

  // –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –¥–ª—è —Å–∏–º–≤–æ–ª–∞
  clearCacheForSymbol(symbol) {
    this.signalCache.delete(symbol);
    this.lastUpdateTime.delete(symbol);
    
    // –û—á–∏—â–∞–µ–º –¥–≤–∏–∂–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
    for (const tf of this.timeframes) {
      const key = `${symbol}_${tf}`;
      this.signalEngines.delete(key);
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞
  getCacheStats() {
    return {
      cachedSymbols: this.signalCache.size,
      sharedSignalEngine: this.sharedSignalEngine ? 1 : 0,
      lastUpdateTimes: this.lastUpdateTime.size,
      maxCacheEntries: this.maxCacheEntries,
      cacheExpiryMs: this.cacheExpiryMs
    };
  }

  // –û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –∫—ç—à
  clearAllCache() {
    this.signalCache.clear();
    this.lastUpdateTime.clear();
    this.sharedSignalEngine = null;
  }

  // –î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä - –æ—á–∏—Å—Ç–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
  destroy() {
    if (this.cleanupInterval) {
      clearInterval(this.cleanupInterval);
      this.cleanupInterval = null;
    }
    this.clearAllCache();
  }
}

module.exports = EnhancedSignalEngine;